from django.db import modelsfrom django.db.models.signals import post_save, pre_savefrom django.dispatch import receiverfrom apps.account.models import Account, PatientModelfrom apps.logus.models import RoomPrice, RoomModel, RoomTypeModel, TariffModel, LogusChequeModel, BookingModelDISCOUNT_CHOICES = (    (0, 0),    (5, 5),    (10, 10),    (15, 15),    (20, 20),    (25, 25),    (30, 30),)SEGMENT = (    ("ОСН","Основной"))STAGES = (    ('booked', 'booked'),    ('arrived', 'arrived'),    ('cancelled', 'cancelled'),)class BookedRoomModel(models.Model):    room_price = models.ForeignKey(RoomPrice, on_delete=models.SET_NULL, null=True)    room_price_amount = models.BigIntegerField(default=0)    tariff = models.ForeignKey(TariffModel, on_delete=models.SET_NULL, null=True)    tariff_amount = models.BigIntegerField(default=0)    room = models.ForeignKey('RoomModel', on_delete=models.SET_NULL, null=True)    room_type = models.ForeignKey(RoomTypeModel, on_delete=models.SET_NULL, null=True)    patients = models.ForeignKey(PatientModel, on_delete=models.SET_NULL, null=True)    discount = models.IntegerField(choices=DISCOUNT_CHOICES, null=True, blank=True, default=0)    abs_price = models.BigIntegerField(default=0)    cheque = models.OneToOneField(LogusChequeModel, on_delete=models.DO_NOTHING, null=True, blank=True)    is_checked_out = models.BooleanField(default=False)    stage = models.CharField(choices=STAGES, max_length=10, default='booked')    start_date = models.DateField()    end_date = models.DateField()    # marketing    # segment = models.CharField(choices=)    created_by = models.ForeignKey(Account, related_name="booked_room", on_delete=models.SET_NULL, null=True)    created_at = models.DateTimeField(auto_now_add=True)    modified_at = models.DateTimeField(auto_now=True)    modified_by = models.ForeignKey(Account, related_name="modf_booked_room", on_delete=models.SET_NULL, null=True)    def __str__(self):        return f"{self.room} - {self.patients}"  # - {self.room_price.tariff}"    @property    def duration(self):        if self.start_date and self.end_date:            duration = self.end_date - self.start_date            return duration.days        else:            return None@receiver(post_save, sender=BookedRoomModel)def abs_price_set(sender, instance: BookedRoomModel = None, created=False, **kwargs):    if created:        print(instance.discount)        instance.room_price_amount = instance.room.price        instance.tariff_amount = instance.tariff.price        disc_pr = (100 - int(instance.discount)) / 100        price_with_discount = instance.room.price * disc_pr        instance.abs_price = price_with_discount * instance.duration        instance.save(update_fields=["abs_price"])@receiver(post_save, sender=BookedRoomModel)def cheque_create_add(sender, instance: BookedRoomModel = None, created=False, **kwargs):    if created:        # TODO optimize        cheque = LogusChequeModel.objects.create(            patient=instance.patients,            created_by=instance.created_by,            modified_by=instance.modified_by        )        instance.cheque = cheque        instance.save(update_fields=["cheque"])    elif instance.cheque is None:        cheque = LogusChequeModel.objects.create(            patient=instance.patients,            created_by=instance.created_by,            modified_by=instance.modified_by        )        instance.cheque = cheque        instance.save(update_fields=["cheque"])