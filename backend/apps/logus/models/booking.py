from datetime import datetimefrom django.db import modelsfrom django.db.models.signals import post_save, pre_savefrom django.dispatch import receiverfrom apps.account.models import Account, PatientModelfrom apps.logus.models import TariffModel, RoomTypeModelDISCOUNT_CHOICES = (    (0, 0),    (5, 5),    (10, 10),    (15, 15),    (20, 20),    (25, 25),    (30, 30),)SEGMENT = (    ("ОСН", "Основной"))STAGES = (    ('booked', 'booked'),    ('settled', 'settled'),    ('arrived', 'arrived'),    ('cancelled', 'cancelled'),    ('served', 'served'),)class BookingModel(models.Model):    series = models.CharField(max_length=255, blank=True, null=True)    current_tariff = models.ForeignKey(        'AvailableTariffModel', on_delete=models.SET_NULL,        null=True, related_name='booking_tariff', blank=True    )    current_room = models.ForeignKey(        'AvailableRoomModel', on_delete=models.SET_NULL, null=True,        related_name='booking', blank=True    )    current_room_type = models.ForeignKey('AvailableRoomsTypeModel', on_delete=models.SET_NULL, null=True, related_name='booking_type')    patient = models.ForeignKey(PatientModel, on_delete=models.SET_NULL, null=True, related_name="bookings")    discount = models.IntegerField(choices=DISCOUNT_CHOICES, null=True, blank=True, default=0)    is_checked_out = models.BooleanField(default=False)    stage = models.CharField(choices=STAGES, max_length=10, default='booked')    start_date = models.DateField(null=True, blank=True)    end_date = models.DateField(null=True, blank=True)    created_by = models.ForeignKey(Account, related_name="booking", on_delete=models.SET_NULL, null=True)    created_at = models.DateTimeField(auto_now_add=True)    modified_at = models.DateTimeField(auto_now=True)    modified_by = models.ForeignKey(Account, related_name="modf_booking", on_delete=models.SET_NULL, null=True)    paid_amount = models.BigIntegerField(default=0)    def __str__(self):        return f"{self.series}"    @property    def absolute_sum(self):        # TODO: save services amount somewhere statically        return 1    @property    def duration(self):        return f"{abs((self.start_date - self.end_date).days)}"    @property    def debt_amount(self):        return self.absolute_sum - self.paid_amountclass BookingHistory(models.Model):    booking = models.ForeignKey(        BookingModel, on_delete=models.CASCADE, null=True,        related_name="booking_history", blank=True    )    start_date = models.DateField(null=True, blank=True)    end_date = models.DateField(null=True, blank=True)    tariff = models.ForeignKey(        'AvailableTariffModel', on_delete=models.SET_NULL,        null=True, related_name='booking_history_tariff', blank=True    )    room = models.ForeignKey(        'AvailableRoomModel', on_delete=models.SET_NULL, null=True,        related_name='booking_history', blank=True    )    room_type = models.ForeignKey(        'AvailableRoomsTypeModel', on_delete=models.SET_NULL, null=True,        related_name='booking_history_type'    )    created_by = models.ForeignKey(Account, related_name="booking_history", on_delete=models.SET_NULL, null=True)    created_at = models.DateTimeField(auto_now_add=True)    modified_at = models.DateTimeField(auto_now=True)    modified_by = models.ForeignKey(Account, related_name="modf_booking_history", on_delete=models.SET_NULL, null=True)    def __str__(self):        return f"{self.booking.patient} - {self.id}"@receiver(post_save, sender=BookingModel)def items_to_stock(sender, instance: BookingModel, created, **kwargs):    if created:        BookingHistory.objects.create(            booking=instance,            start_date=instance.start_date,            end_date=instance.end_date,            tariff=instance.current_tariff,            room=instance.current_room,            room_type=instance.current_room_type,        )@receiver(post_save, sender=BookingModel)def create_series(sender, instance: BookingModel, created, **kwargs):    if created:        now = datetime.now()        day = now.strftime('%d')        month = now.strftime('%m')        year = now.strftime('%Y')        serial = f"{instance.id}-{day}-{month}-{year}"        instance.series = serial        instance.save()