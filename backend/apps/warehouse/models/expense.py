from django.db import modelsfrom apps.account.models import Account, BranchModelfrom apps.warehouse.models import ItemsModel, StorePointModelclass ExpenseModel(models.Model):    STATE_CHOICES = (        ('в ожидании', 'в ожидании'),        ('доставлено', 'доставлено'),        ('отказоно', 'отказоно'),    )    series = models.CharField(null=True, blank=True, max_length=255)    receiver = models.ForeignKey(Account, on_delete=models.SET_NULL, null=True, related_name="expenses")    created_by = models.ForeignKey(Account, related_name="w_expense_creates", on_delete=models.SET_NULL,                                   null=True)    store_point = models.ForeignKey(StorePointModel, on_delete=models.SET_NULL, null=True, blank=True)    state = models.CharField(choices=STATE_CHOICES, default='в ожидании', max_length=50)    created_at = models.DateTimeField(auto_now_add=True)    modified_at = models.DateTimeField(auto_now=True)    modified_by = models.ForeignKey(Account, related_name="w_expense_mod", on_delete=models.SET_NULL, null=True)class ExpenseItemsModel(models.Model):    STATE_CHOICES = (        ('в ожидании', 'в ожидании'),        ('отменена', 'отменена'),        ('не найдено', 'не найдено'),        ('принято', 'принято'),    )    item = models.ForeignKey(ItemsModel, on_delete=models.CASCADE, related_name='expanse_items')    expense = models.ForeignKey(ExpenseModel, on_delete=models.CASCADE, related_name='expanse_items')    quantity = models.IntegerField(default=1)    expire_date = models.DateField(null=True)    state = models.CharField(choices=STATE_CHOICES, default='принято', max_length=50)    created_by = models.ForeignKey(Account, related_name="w_expense_items_creates", on_delete=models.SET_NULL, null=True)    created_at = models.DateTimeField(auto_now_add=True)    modified_at = models.DateTimeField(auto_now=True)    modified_by = models.ForeignKey(Account, related_name="w_expense_items_mod", on_delete=models.SET_NULL, null=True)    @property    def expense_price(self):        return self.item.price * self.quantity