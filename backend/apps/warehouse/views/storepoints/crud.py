from django.contrib.auth.decorators import login_requiredfrom django.shortcuts import get_object_or_404from django.shortcuts import render, redirectfrom apps.warehouse.forms import StorePointCreateFormfrom apps.warehouse.models import StorePointModeldef store_points_get_view(request):    context = {}    branches = StorePointModel.objects.all()    context["store_points"] = branches    return render(request, "storepoint/storepoints_list.html", context)@login_requireddef store_point_create(request):    if request.method == "POST":        form = StorePointCreateForm(request.POST)        if form.is_valid():            store_point: StorePointModel = form.save(commit=False)            store_point.created_by = request.user            store_point.modified_by = request.user            store_point.save()            return redirect("warehouse_storepoint:store-points")    context = {}    form = StorePointCreateForm()    context["form"] = form    return render(request, "storepoint/storepoint_create.html", context)@login_requireddef store_point_update(request, pk):    print(request.method)    store_point_update = get_object_or_404(StorePointModel, pk=pk)    if request.method == "POST":        form = StorePointCreateForm(request.POST, instance=store_point_update)        if form.is_valid():            store_point: StorePointModel = form.save(commit=False)            store_point.created_by = request.user            store_point.modified_by = request.user            store_point.save()            return redirect("warehouse_storepoint:store-points")    context = {}    form = StorePointCreateForm(instance=store_point_update)    context["form"] = form    return render(request, "storepoint/storepoint_update.html", context)@login_requireddef store_point_delete(request, pk):    store_point = get_object_or_404(StorePointModel, pk=pk)    store_point.delete()    return redirect("warehouse_storepoint:store-points")