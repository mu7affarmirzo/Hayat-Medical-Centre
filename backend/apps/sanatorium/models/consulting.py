from django.db import modelsfrom apps.account.models import Accountfrom apps.sanatorium.models import ComplaintModel, ProfessionsModelclass DiagnosisTemplateCategory(models.Model):    name = models.CharField(max_length=255)    def __str__(self):        return f"{self.name} - {self}"class BasicModel(models.Model):    name = models.TextField()    code = models.CharField(max_length=10, null=True, blank=True)    category = models.ForeignKey(DiagnosisTemplateCategory, on_delete=models.CASCADE)    def __str__(self):        if self.code:            return f"{self.code}: {self.name}"        return f"{self.name}"class AnamnesisMorbi(BasicModel):    passclass AnamnesisVitae(BasicModel):    passclass ContactWithInfectious(BasicModel):    passclass ContactWithARVI(BasicModel):    passclass TwoMonth(BasicModel):    passclass TransferredInfectious(BasicModel):    passclass StayingHospital(BasicModel):    passclass ReceivingBloodTransfusions(BasicModel):    passclass SurgicalMassiveInterventionsSixMonths(BasicModel):    passclass DentistVisitsLastSixMonths(BasicModel):    passclass Pigmentation(BasicModel):    passclass Depigmentation(BasicModel):    passclass Rashes(BasicModel):    passclass VascularChanges(BasicModel):    passclass Hemorrhages(BasicModel):    passclass Scarring(BasicModel):    passclass TrophicChanges(BasicModel):    passclass VisibleTumors(BasicModel):    passclass AdditionalData(BasicModel):    default = models.BooleanField(default=False)class GeneralState(BasicModel):    default = models.BooleanField(default=False)class Consciousness(BasicModel):    default = models.BooleanField(default=False)class Provisions(BasicModel):    default = models.BooleanField(default=False)class Constitution(BasicModel):    default = models.BooleanField(default=False)class Skin(BasicModel):    default = models.BooleanField(default=False)class SkinTurgor(BasicModel):    default = models.BooleanField(default=False)class SubcutaneousFat(BasicModel):    default = models.BooleanField(default=False)class SkinMoisture(BasicModel):    default = models.BooleanField(default=False)class LymphNodes(BasicModel):    default = models.BooleanField(default=False)class SwellingPastiness(BasicModel):    passclass Deformations(BasicModel):    passclass Contractures(BasicModel):    passclass MovementRestrictions(BasicModel):    passclass TreatmentDoctorAppointmentModel(models.Model):    CONSCIOUSNESS_CHOICES = (        ("ясное", "ясное"),        ("ступор", "ступор"),        ("сопор", "сопор"),        ("кома", "кома")    )    STATE_CHOICES = (        ("активное", "активное"),        ("пассивное", "пассивное"),        ("вынужденное", "вынужденное")    )    CONSTITUTION_CHOICES = (        ("нормасетик", "нормасетик"),        ("аснетик", "аснетик"),        ("гиперстеник", "гиперстеник")    )    SKIN_CHOICES = (        ("нормальной окраски", "нормальной окраски"),        ("бледные", "бледные"),        ("гиперемия", "гиперемия"),        ("иктеричные", "иктеричные"),        ("субиктеричные", "субиктеричные"),        ("акроцианоз", "акроцианоз"),        ("земелистого цвета", "земелистого цвета")    )    SKIN_MOISTURE_CHOICES = (        ("обычная", "обычная"),        ("влажная", "влажная"),        ("сухая", "сухая")    )    SKIN_TURGOR_CHOICES = (        ("в норме", "в норме"),        ("снижет", "снижет"),    )    SUBCUTANEOUS_FAT_CHOICES = (        ("развита умеренно", "развита умеренно"),        ("развита слабо", "развита слабо"),        ("развита чрезмерно", "развита чрезмерно"),    )    LYMPH_NODES_CHOICES = (        ("не увеличены", "не увеличены"),        ("мягкие", "мягкие"),        ("плотные", "плотные"),        ("эластичные", "эластичные"),    )    BREATHING_TYPE_CHOICES = (        ("", ""),        ("", ""),    )    doctor = models.ForeignKey(Account, on_delete=models.CASCADE)    complaint = models.TextField(null=True, blank=True, )    anamnesis_morbi = models.TextField(null=True, blank=True)    anamnesis_vitae = models.TextField(null=True, blank=True)    # EPIDANAMNES    contact_with_infectious = models.TextField(null=True, blank=True)    contact_with_orvi = models.BooleanField(default=False)    is_away_two_month = models.BooleanField(default=False, blank=True)    transferred_infectious = models.CharField(max_length=255, null=True, blank=True)    staying_hospital = models.CharField(max_length=255, null=True, blank=True)    receiving_blood_transfusions = models.CharField(max_length=255, null=True, blank=True)    surgical_massive_interventions_six_months = models.CharField(max_length=255, null=True, blank=True)    dentist_visits_last_six_months = models.CharField(max_length=255, null=True, blank=True)    profession_toxics = models.CharField(max_length=255, null=True, blank=True)    additional_data = models.CharField(max_length=255, null=True, blank=True)    # Status praesens objectivus    general_state = models.CharField(null=True, blank=True)    consciousness = models.CharField(choices=CONSCIOUSNESS_CHOICES, null=True, blank=True, max_length=255)    state = models.CharField(choices=CONSCIOUSNESS_CHOICES, null=True, blank=True, max_length=255)    constitution = models.CharField(choices=CONSTITUTION_CHOICES, null=True, blank=True, max_length=255)    skin = models.CharField(choices=SKIN_CHOICES, null=True, blank=True, max_length=255)    pigmentation = models.CharField(null=True, blank=True, max_length=255)    depigmentation = models.CharField(null=True, blank=True, max_length=255)    rashes = models.CharField(null=True, blank=True, max_length=255)    vascular_changes = models.CharField(null=True, blank=True, max_length=255)    hemorrhages = models.CharField(null=True, blank=True, max_length=255)    scarring = models.CharField(null=True, blank=True, max_length=255, verbose_name='рубцы')    trophic_changes = models.CharField(null=True, blank=True, max_length=255)    visible_tumors = models.CharField(null=True, blank=True, max_length=255)    skin_moisture = models.CharField(choices=SKIN_MOISTURE_CHOICES, null=True, blank=True, max_length=255)    skin_turgor = models.CharField(choices=SKIN_TURGOR_CHOICES, null=True, blank=True, max_length=255)    subcutaneous_fat = models.CharField(choices=SUBCUTANEOUS_FAT_CHOICES, null=True, blank=True, max_length=255)    temperature = models.FloatField(default=36.6)    height = models.FloatField()    weight = models.FloatField()    heart_beat = models.IntegerField()    arterial_high = models.IntegerField()    arterial_low = models.IntegerField()    imt = models.FloatField()    extra_weight = models.FloatField()    swelling_pastiness = models.CharField(null=True, blank=True, max_length=255)    lymph_nodes = models.CharField(choices=LYMPH_NODES_CHOICES, null=True, blank=True, max_length=255)    # Конно-мыщечная система    deformations = models.CharField(null=True, blank=True, max_length=255)    contractures = models.CharField(null=True, blank=True, max_length=255)    movement_restrictions = models.CharField(null=True, blank=True, max_length=255)    # Dixatelnaya sistema    respiratory_frequency = models.IntegerField()    breathing_type = models.CharField(choices=BREATHING_TYPE_CHOICES, null=True, blank=True, max_length=255)    # anamnesis_morbi = models.ForeignKey(on_delete=models.SET_NULL, null=True, blank=True)    # anamnesis_morbi = models.ForeignKey(on_delete=models.SET_NULL, null=True, blank=True)    # anamnesis_morbi = models.ForeignKey(on_delete=models.SET_NULL, null=True, blank=True)