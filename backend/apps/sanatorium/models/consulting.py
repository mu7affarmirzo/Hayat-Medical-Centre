from django.db import modelsfrom apps.account.models import Accountfrom apps.sanatorium.models import ComplaintModel, ProfessionsModelclass BasicModel(models.Model):    name = models.TextField()class AnamnesisMorbi(BasicModel):    passclass AnamnesisVitae(BasicModel):    passclass ContactWithInfectious(BasicModel):    passclass ContactWithARVI(BasicModel):    passclass TwoMonth(BasicModel):    passclass TransferredInfectious(BasicModel):    passclass StayingHospital(BasicModel):    passclass ReceivingBloodTransfusions(BasicModel):    passclass SurgicalMassiveInterventionsSixMonths(BasicModel):    passclass DentistVisitsLastSixMonths(BasicModel):    passclass Pigmentation(BasicModel):    passclass Depigmentation(BasicModel):    passclass Rashes(BasicModel):    passclass VascularChanges(BasicModel):    passclass Hemorrhages(BasicModel):    passclass Scarring(BasicModel):    passclass TrophicChanges(BasicModel):    passclass VisibleTumors(BasicModel):    passclass AdditionalData(BasicModel):    default = models.BooleanField(default=False)class GeneralState(BasicModel):    default = models.BooleanField(default=False)class Consciousness(BasicModel):    default = models.BooleanField(default=False)class Provisions(BasicModel):    default = models.BooleanField(default=False)class Constitution(BasicModel):    default = models.BooleanField(default=False)class Skin(BasicModel):    default = models.BooleanField(default=False)class SkinTurgor(BasicModel):    default = models.BooleanField(default=False)class SubcutaneousFat(BasicModel):    default = models.BooleanField(default=False)class SkinMoisture(BasicModel):    default = models.BooleanField(default=False)class LymphNodes(BasicModel):    default = models.BooleanField(default=False)class SwellingPastiness(BasicModel):    passclass Deformations(BasicModel):    passclass Contractures(BasicModel):    passclass MovementRestrictions(BasicModel):    passclass TreatmentDoctorAppointmentModel(models.Model):    doctor = models.ForeignKey(Account, on_delete=models.CASCADE)    complaint = models.ForeignKey(ComplaintModel, on_delete=models.SET_NULL, null=True, blank=True, )    anamnesis_morbi = models.ForeignKey(AnamnesisMorbi, on_delete=models.SET_NULL, null=True, blank=True)    anamnesis_vitae = models.ForeignKey(AnamnesisVitae, on_delete=models.SET_NULL, null=True, blank=True)    contact_with_infectious = models.ForeignKey(ContactWithInfectious, on_delete=models.SET_NULL, null=True, blank=True)    contact_with_arvi = models.ForeignKey(ContactWithARVI, on_delete=models.SET_NULL, null=True, blank=True)    two_month = models.ForeignKey(TwoMonth, on_delete=models.SET_NULL, null=True, blank=True)    transferred_infectious = models.ForeignKey(TransferredInfectious, on_delete=models.SET_NULL, null=True, blank=True)    staying_hospital = models.ForeignKey(StayingHospital, on_delete=models.SET_NULL, null=True, blank=True)    receiving_blood_transfusions = models.ForeignKey(ReceivingBloodTransfusions, on_delete=models.SET_NULL, null=True,                                                     blank=True)    surgical_massive_interventions_six_months = models.ForeignKey(SurgicalMassiveInterventionsSixMonths,                                                                  on_delete=models.SET_NULL, null=True, blank=True)    dentist_visits_last_six_months = models.ForeignKey(DentistVisitsLastSixMonths, on_delete=models.SET_NULL, null=True,                                                       blank=True)    profession_toxics = models.ForeignKey(ProfessionsModel, on_delete=models.SET_NULL, null=True, blank=True)    additional_data = models.ForeignKey(AdditionalData, on_delete=models.SET_NULL, null=True, blank=True)    general_state = models.ForeignKey(GeneralState, on_delete=models.SET_NULL, null=True, blank=True)    skin = models.ForeignKey(Skin, on_delete=models.SET_NULL, null=True, blank=True)    constitution = models.ForeignKey(Constitution, on_delete=models.SET_NULL, null=True, blank=True)    provisions = models.ForeignKey(Provisions, on_delete=models.SET_NULL, null=True, blank=True)    consciousness = models.ForeignKey(Consciousness, on_delete=models.SET_NULL, null=True, blank=True)    pigmentation = models.ForeignKey(Pigmentation, on_delete=models.SET_NULL, null=True, blank=True)    depigmentation = models.ForeignKey(Depigmentation, on_delete=models.SET_NULL, null=True, blank=True)    rashes = models.ForeignKey(Rashes, on_delete=models.SET_NULL, null=True, blank=True)    vascular_changes = models.ForeignKey(VascularChanges, on_delete=models.SET_NULL, null=True, blank=True)    hemorrhages = models.ForeignKey(Hemorrhages, on_delete=models.SET_NULL, null=True, blank=True)    scarring = models.ForeignKey(Scarring, on_delete=models.SET_NULL, null=True, blank=True)    trophic_changes = models.ForeignKey(TrophicChanges, on_delete=models.SET_NULL, null=True, blank=True)    visible_tumors = models.ForeignKey(VisibleTumors, on_delete=models.SET_NULL, null=True, blank=True)    skin_moisture = models.ForeignKey(VisibleTumors, on_delete=models.SET_NULL, null=True, blank=True)    skin_turgor = models.ForeignKey(SkinTurgor, on_delete=models.SET_NULL, null=True, blank=True)    subcutaneous_fat = models.ForeignKey(SubcutaneousFat, on_delete=models.SET_NULL, null=True, blank=True)    temperature = models.FloatField(default=36.6)    height = models.FloatField()    weight = models.FloatField()    heart_beat = models.IntegerField()    arterial = models.CharField(max_length=10)    imt = models.FloatField()    extra_weight = models.FloatField()    swelling_pastiness = models.ForeignKey(SwellingPastiness, on_delete=models.SET_NULL, null=True, blank=True)    lymph_nodes = models.ForeignKey(LymphNodes, on_delete=models.SET_NULL, null=True, blank=True)    deformations = models.ForeignKey(Deformations, on_delete=models.SET_NULL, null=True, blank=True)    contractures = models.ForeignKey(Contractures, on_delete=models.SET_NULL, null=True, blank=True)    movement_restrictions = models.ForeignKey(MovementRestrictions, on_delete=models.SET_NULL, null=True, blank=True)    respiratory_frequency = models.IntegerField()    # anamnesis_morbi = models.ForeignKey(on_delete=models.SET_NULL, null=True, blank=True)    # anamnesis_morbi = models.ForeignKey(on_delete=models.SET_NULL, null=True, blank=True)    # anamnesis_morbi = models.ForeignKey(on_delete=models.SET_NULL, null=True, blank=True)