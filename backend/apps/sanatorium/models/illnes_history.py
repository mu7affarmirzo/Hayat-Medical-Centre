import uuidfrom django.db import modelsfrom apps.account.models import Account, MedicalService, DoctorAccountModel, NurseAccountModelfrom apps.account.models import PatientModelfrom apps.lis.models import LabResearchModelfrom apps.logus.models import ServiceModel, BookingModelfrom apps.sanatorium.models.diagnosis_template import DiagnosisTemplatefrom apps.warehouse.models import ItemsModel, ItemsInStockModelclass ProfessionsModel(models.Model):    name = models.CharField(max_length=50, blank=True, null=True)    def __str__(self):        return self.nameclass ToxicFactorsModel(models.Model):    name = models.CharField(max_length=50, blank=True, null=True)    def __str__(self):        return self.nameclass TagsModel(models.Model):    name = models.CharField(max_length=50, blank=True, null=True)    def __str__(self):        return self.nameclass IllnessHistory(models.Model):    TYPES = (        ('stationary', 'stationary'),        ('ambulatory', 'ambulatory'),    )    STATE = (        ('open', 'open'),        ('closed', 'closed'),    )    series_number = models.CharField(max_length=255, default=uuid.uuid4)    patient = models.ForeignKey(PatientModel, on_delete=models.CASCADE)    booking = models.ForeignKey(BookingModel, on_delete=models.CASCADE)    type = models.CharField(choices=TYPES, max_length=15, default='stationary')    profession = models.ForeignKey(ProfessionsModel, on_delete=models.SET_NULL, null=True, blank=True)    toxic_factors = models.ManyToManyField(ToxicFactorsModel)    tags = models.ForeignKey(TagsModel, on_delete=models.SET_NULL, null=True, blank=True)    state = models.CharField(choices=STATE, default="open", max_length=100)    initial_diagnosis = models.ForeignKey(DiagnosisTemplate, on_delete=models.CASCADE, null=True, blank=True, related_name='initial')    at_arrival_diagnosis = models.ForeignKey(DiagnosisTemplate, on_delete=models.CASCADE, null=True, blank=True, related_name='arrival')    diagnosis = models.ForeignKey(DiagnosisTemplate, on_delete=models.CASCADE, null=True, blank=True, related_name='illness_history_diagnosis')    nurse = models.ManyToManyField(NurseAccountModel, related_name="illness_history_nurse")    doctor = models.ForeignKey(DoctorAccountModel, on_delete=models.CASCADE, related_name="illness_history_doctor", null=True, blank=True)    def __str__(self):        return str(self.series_number)class BaseMedicalServiceModel(models.Model):    STATE_CHOICES = (        ('assigned', 'assigned'),        ('cancelled', 'cancelled'),        ('stopped', 'stopped'),        ('dispatched', 'dispatched'),    )    MODEL_CHOICES = (        ('initial', 'initial'),        ('repeated_app', 'repeated_app'),        ('cardiologist', 'cardiologist'),        ('neurologist', 'neurologist'),        ('ekg', 'ekg'),        ('on_duty_doctor', 'on_duty_doctor'),    )    model_type = models.CharField(choices=MODEL_CHOICES, max_length=50)    model_ref_id = models.BigIntegerField()    illness_history = models.ForeignKey(IllnessHistory, on_delete=models.CASCADE, null=True, blank=True)    medical_service = models.ForeignKey(MedicalService, on_delete=models.SET_NULL, null=True)    price = models.BigIntegerField(default=0)    consulted_doctor = models.ForeignKey(DoctorAccountModel, blank=True, null=True, on_delete=models.SET_NULL,                                         related_name='base_md_consulted_doctor')    state = models.CharField(choices=STATE_CHOICES, default='assigned', max_length=50)    created_by = models.ForeignKey(Account, related_name='b_md_created', on_delete=models.SET_NULL, null=True)    created_at = models.DateTimeField(auto_now_add=True)    modified_at = models.DateTimeField(auto_now=True)    modified_by = models.ForeignKey(Account, related_name="modf_b_md", on_delete=models.SET_NULL, null=True)class BaseProcedureServiceModel(models.Model):    STATE_CHOICES = (        ('assigned', 'assigned'),        ('cancelled', 'cancelled'),        ('stopped', 'stopped'),        ('dispatched', 'dispatched'),    )    FREQUENCY_CHOICES = (        ("каждый день", "каждый день"),        ("через день", "через день"),    )    MODEL_CHOICES = (        ('initial', 'initial'),        ('repeated_app', 'repeated_app'),        ('cardiologist', 'cardiologist'),        ('neurologist', 'neurologist'),        ('ekg', 'ekg'),        ('on_duty_doctor', 'on_duty_doctor'),    )    model_type = models.CharField(choices=MODEL_CHOICES, max_length=50)    model_ref_id = models.BigIntegerField()    illness_history = models.ForeignKey(IllnessHistory, on_delete=models.CASCADE, null=True, blank=True)    medical_service = models.ForeignKey(MedicalService, on_delete=models.SET_NULL, null=True)    price = models.BigIntegerField(default=0)    procedure_doctor = models.ForeignKey(DoctorAccountModel, blank=True, null=True, on_delete=models.SET_NULL,                                         related_name='base_procedure_doctor')    state = models.CharField(choices=STATE_CHOICES, default='assigned', max_length=50)    quantity = models.IntegerField(default=1)    start_date = models.DateField(auto_now_add=True, null=True)    frequency = models.CharField(choices=FREQUENCY_CHOICES, default='каждый день', max_length=50)    comments = models.TextField(null=True, blank=True)    created_by = models.ForeignKey(Account, related_name='bp_created', on_delete=models.SET_NULL, null=True)    created_at = models.DateTimeField(auto_now_add=True)    modified_at = models.DateTimeField(auto_now=True)    modified_by = models.ForeignKey(Account, related_name="modf_bp", on_delete=models.SET_NULL, null=True)    def __str__(self):        return f"{self.illness_history.series_number} - {self.medical_service.name}"class BaseLabResearchServiceModel(models.Model):    STATE_CHOICES = (        ('assigned', 'assigned'),        ('cancelled', 'cancelled'),        ('stopped', 'stopped'),        ('dispatched', 'dispatched'),        ('results', 'results'),    )    MODEL_CHOICES = (        ('initial', 'initial'),        ('repeated_app', 'repeated_app'),        ('cardiologist', 'cardiologist'),        ('neurologist', 'neurologist'),        ('ekg', 'ekg'),        ('on_duty_doctor', 'on_duty_doctor'),    )    model_type = models.CharField(choices=MODEL_CHOICES, max_length=50)    model_ref_id = models.BigIntegerField()    illness_history = models.ForeignKey(IllnessHistory, on_delete=models.CASCADE, null=True,                                        related_name='base_lab_research')    lab = models.ForeignKey(LabResearchModel, on_delete=models.SET_NULL, null=True, related_name="lab_app")    price = models.BigIntegerField(default=0)    lab_doctor = models.ForeignKey(DoctorAccountModel, blank=True, null=True, on_delete=models.SET_NULL,                                   related_name='base_lab_doctor')    state = models.CharField(choices=STATE_CHOICES, default='assigned', max_length=50)    start_date = models.DateField(auto_now_add=True, null=True)    comments = models.TextField(null=True, blank=True)    created_by = models.ForeignKey(Account, related_name='bl_created', on_delete=models.SET_NULL, null=True)    created_at = models.DateTimeField(auto_now_add=True)    modified_at = models.DateTimeField(auto_now=True)    modified_by = models.ForeignKey(Account, related_name="modf_bl", on_delete=models.SET_NULL, null=True)class BasePillsInjectionsModel(models.Model):    STATE_CHOICES = (        ('assigned', 'assigned'),        ('cancelled', 'cancelled'),        ('stopped', 'stopped'),        ('dispatched', 'dispatched'),    )    PILLS_FREQUENCY_CHOICES = (        ("3 раза в день", "3 раза в день"),        ("до еды", "до еды"),        ("после еды", "после еды"),    )    illness_history = models.ForeignKey(IllnessHistory, on_delete=models.CASCADE,                                        null=True, related_name='base_pills_injections')    pills_injections = models.ForeignKey(ItemsInStockModel, on_delete=models.CASCADE)    price = models.BigIntegerField(default=0)    state = models.CharField(choices=STATE_CHOICES, default='assigned', max_length=50)    quantity = models.IntegerField(default=1)    period_days = models.IntegerField(null=True, blank=True)    start_date = models.DateField(null=True)    end_date = models.DateField(null=True)    frequency = models.CharField(choices=PILLS_FREQUENCY_CHOICES, default='', max_length=50)    comments = models.TextField(null=True, blank=True)    instruction = models.TextField(null=True, blank=True)    created_by = models.ForeignKey(Account, related_name='b_pl_created', on_delete=models.SET_NULL, null=True)    created_at = models.DateTimeField(auto_now_add=True)    modified_at = models.DateTimeField(auto_now=True)    modified_by = models.ForeignKey(Account, related_name="modf_b_pl", on_delete=models.SET_NULL, null=True)class PatientDietModel(models.Model):    TYPES = (        ('regular_diet', 'regular_diet'),        ('exception', 'exception'),        ('allergy', 'allergy'),    )    patient = models.ForeignKey(PatientModel, on_delete=models.CASCADE)    illness_history = models.ForeignKey(IllnessHistory, on_delete=models.CASCADE)    food = models.CharField(max_length=150, null=True)    type = models.CharField(choices=TYPES, max_length=15, default='regular_diet')    comment = models.TextField(null=True, blank=True)    start_date = models.DateField()    end_date = models.DateField()    def __str__(self):        return str(self.patient.full_name)class ComplaintModel(models.Model):    name = models.CharField(max_length=500)class SummaryModel(models.Model):    name = models.CharField(max_length=255)class ConsultingAndResearchModel(models.Model):    name = models.CharField(max_length=255)class PivotConsultingAndResearchModel(models.Model):    ill_history = models.ForeignKey(IllnessHistory, on_delete=models.CASCADE, null=True, blank=True)    consulting = models.ForeignKey(ConsultingAndResearchModel, on_delete=models.SET_NULL, null=True, blank=True)    # updated_by    # created_byclass TreatmentServiceModel(models.Model):    ill_history = models.ForeignKey(IllnessHistory, on_delete=models.CASCADE, null=True, blank=True)    service = models.ForeignKey(ServiceModel, on_delete=models.SET_NULL, null=True, blank=True)    # days    # quantityclass PivotPillsDrugsModel(models.Model):    ill_history = models.ForeignKey(IllnessHistory, on_delete=models.CASCADE, null=True, blank=True)    pills = models.ForeignKey(ItemsModel, on_delete=models.SET_NULL, null=True, blank=True)    quantity = models.IntegerField()    # days    # doseclass AppWithDutyDocktor(models.Model):    complaint = models.ManyToManyField(ComplaintModel, related_name="apps_with_duty_doc",)# on_delete=models.CASCADE)    obj_data = models.ManyToManyField(ComplaintModel, related_name="apps_with_duty_doc_data",)# on_delete=models.CASCADE)    temperature = models.FloatField(default=36.6)    arterial = models.CharField(max_length=10)    heart_beat = models.IntegerField()    diagnosis = models.ForeignKey(DiagnosisTemplate, on_delete=models.CASCADE)    summary = models.ForeignKey(SummaryModel, on_delete=models.CASCADE)