import uuidfrom django.db import modelsfrom apps.account.models import Accountfrom apps.account.models import PatientModelfrom apps.logus.models import BookedRoomModel, ServiceModelfrom apps.sanatorium.models.diagnosis_template import DiagnosisTemplatefrom apps.warehouse.models import ItemsModelclass ProfessionsModel(models.Model):    name = models.CharField(max_length=50, blank=True, null=True)    def __str__(self):        return self.nameclass ToxicFactorsModel(models.Model):    name = models.CharField(max_length=50, blank=True, null=True)    def __str__(self):        return self.nameclass TagsModel(models.Model):    name = models.CharField(max_length=50, blank=True, null=True)    def __str__(self):        return self.nameclass IllnessHistory(models.Model):    TYPES = (        ('stationary', 'stationary'),        ('ambulatory', 'ambulatory'),    )    STATE = (        ('open', 'open'),        ('closed', 'closed'),    )    series_number = models.CharField(max_length=255, default=uuid.uuid4)    patient = models.ForeignKey(PatientModel, on_delete=models.CASCADE)    booking = models.ForeignKey(BookedRoomModel, on_delete=models.CASCADE)    type = models.CharField(choices=TYPES, max_length=15, default='stationary')    profession = models.ForeignKey(ProfessionsModel, on_delete=models.SET_NULL, null=True, blank=True)    toxic_factors = models.ManyToManyField(ToxicFactorsModel)    tags = models.ForeignKey(TagsModel, on_delete=models.SET_NULL, null=True, blank=True)    state = models.CharField(choices=STATE, default="open", max_length=100)    diagnosis = models.ForeignKey(DiagnosisTemplate, on_delete=models.CASCADE)    nurse = models.ManyToManyField(Account, related_name="illness_history_nurse")    doctor = models.ForeignKey(Account, on_delete=models.CASCADE, related_name="illness_history_doctor")    def __str__(self):        return str(self.series_number)class PatientDietModel(models.Model):    TYPES = (        ('regular_diet', 'regular_diet'),        ('exception', 'exception'),        ('allergy', 'allergy'),    )    patient = models.ForeignKey(PatientModel, on_delete=models.CASCADE)    illness_history = models.ForeignKey(IllnessHistory, on_delete=models.CASCADE)    food = models.CharField(max_length=150, null=True)    type = models.CharField(choices=TYPES, max_length=15, default='regular_diet')    comment = models.TextField(null=True, blank=True)    start_date = models.DateField()    end_date = models.DateField()    def __str__(self):        return str(self.patient.full_name)class ComplaintModel(models.Model):    name = models.CharField(max_length=500)class SummaryModel(models.Model):    name = models.CharField(max_length=255)class ConsultingAndResearchModel(models.Model):    name = models.CharField(max_length=255)class PivotConsultingAndResearchModel(models.Model):    ill_history = models.ForeignKey(IllnessHistory, on_delete=models.CASCADE, null=True, blank=True)    consulting = models.ForeignKey(ConsultingAndResearchModel,on_delete=models.SET_NULL, null=True, blank=True)    # updated_by    # created_byclass TreatmentServiceModel(models.Model):    ill_history = models.ForeignKey(IllnessHistory, on_delete=models.CASCADE, null=True, blank=True)    service = models.ForeignKey(ServiceModel, on_delete=models.SET_NULL, null=True, blank=True)    # days    # quantityclass PivotPillsDrugsModel(models.Model):    ill_history = models.ForeignKey(IllnessHistory, on_delete=models.CASCADE, null=True, blank=True)    pills = models.ForeignKey(ItemsModel, on_delete=models.SET_NULL, null=True, blank=True)    quantity = models.IntegerField()    # days    # doseclass AppWithDutyDocktor(models.Model):    complaint = models.ManyToManyField(ComplaintModel, related_name="apps_with_duty_doc",)# on_delete=models.CASCADE)    obj_data = models.ManyToManyField(ComplaintModel, related_name="apps_with_duty_doc_data",)# on_delete=models.CASCADE)    temperature = models.FloatField(default=36.6)    arterial = models.CharField(max_length=10)    heart_beat = models.IntegerField()    diagnosis = models.ForeignKey(DiagnosisTemplate, on_delete=models.CASCADE)    summary = models.ForeignKey(SummaryModel, on_delete=models.CASCADE)