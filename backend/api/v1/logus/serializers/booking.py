import datetimefrom rest_framework import serializersfrom django.db.models import Sumfrom api.v1.organizations.serializers import PatientModelSerializerfrom apps.logus.models import BookedRoomModel, RoomTypeModel, RoomModel# class BookingModelSerializer(serializers.ModelSerializer):#     patient = PatientModelSerializer()#     booked_room = BookedRoomModelSerializer()##     class Meta:#         model = BookingModel#         exclude = ["modified_by", "created_by"]class RoomModelSerializer(serializers.ModelSerializer):    class Meta:        model = RoomModel        fields = '__all__'class RoomTypeModelSerializer(serializers.ModelSerializer):    class Meta:        model = RoomTypeModel        fields = '__all__'class BookingModelSerializer(serializers.ModelSerializer):    booking_series_number = serializers.CharField(source='booking.series')    patients = PatientModelSerializer()    room = RoomModelSerializer()    room_type = RoomTypeModelSerializer()    living = serializers.SerializerMethodField("days_list_method")    class Meta:        model = BookedRoomModel        exclude = ["modified_by", "created_by"]    def days_list_method(self, booking: BookedRoomModel):        step = datetime.timedelta(days=1)        date_range = [booking.start_date + i * step for i in range((booking.end_date - booking.start_date).days + 1)]        response = []        for i in date_range:            services = booking.purchased_services.filter(created_at__date=i)            ssumma = 0            services_response = [{"name": i.service.service_name, "price": i.service.price} for i in services]            for x in services_response:                ssumma += x.get("price")            response.append(                {"date": str(i),                 "scheme": booking.patients.age,                 "tariff": booking.tariff.name,                 "roomType": booking.room_type.name,                 "room": booking.room.room_number,                 "disCount": booking.discount,                 "services": services_response,                 "place": booking.abs_price,                 "price": booking.abs_price + ssumma                 }            )        return responseclass CreateBookingModelSerializer(serializers.Serializer):    tariff = serializers.CharField()    room = serializers.CharField()    room_type = serializers.CharField()    patients = serializers.IntegerField()    start_date = serializers.DateField(required=True)    end_date = serializers.DateField(required=True)class FreeRoomDateRangeSerializer(serializers.Serializer):    start_date = serializers.DateField(required=False, allow_null=True)    end_date = serializers.DateField(required=False, allow_null=True)    class Meta:        fields = '__all__'