import datetimefrom django.db.models import Qfrom rest_framework import serializersfrom api.v1.logus.serializers import BookedRoomRoomModelSerializer, BookedRoomTariffsModelSerializerfrom api.v1.organizations.serializers import PatientModelSerializerfrom apps.logus.models import BookedRoomModel, RoomTypeModel, RoomModel, BookedRoomRoomModel, BookedRoomTariffsModel# class BookingModelSerializer(serializers.ModelSerializer):#     patient = PatientModelSerializer()#     booked_room = BookedRoomModelSerializer()##     class Meta:#         model = BookingModel#         exclude = ["modified_by", "created_by"]class RoomModelSerializer(serializers.ModelSerializer):    class Meta:        model = RoomModel        fields = '__all__'class RoomTypeModelSerializer(serializers.ModelSerializer):    class Meta:        model = RoomTypeModel        fields = '__all__'class BookingModelSerializer(serializers.ModelSerializer):    patients = PatientModelSerializer()    room = RoomModelSerializer()    room_type = RoomTypeModelSerializer()    living = serializers.SerializerMethodField("days_list_method")    cheques = serializers.SerializerMethodField("cheques_list_method")    class Meta:        model = BookedRoomModel        exclude = ["modified_by", "created_by"]    def days_list_method(self, booking: BookedRoomModel):        step = datetime.timedelta(days=1)        date_range = [booking.start_date + i * step for i in range((booking.end_date - booking.start_date).days + 1)]        response = []        for i in date_range:            services = booking.purchased_services.filter(created_at__date=i)            room = BookedRoomRoomModel.objects.filter(booked_room=booking).filter(                Q(start_date__gte=i) & Q(end_date__lte=i)).first()            room = BookedRoomRoomModelSerializer(room).data            tariff = BookedRoomTariffsModel.objects.filter(booked_room=booking).filter(                Q(start_date__gte=i) & Q(end_date__lte=i)).first()            tariff = BookedRoomTariffsModelSerializer(tariff).data            ssumma = 0            services_response = [{"name": i.service.service_name, "price": i.service.price} for i in services]            for x in services_response:                ssumma += x.get("price")            response.append({                "date": str(i),                "scheme": booking.patients.age,                "tariff": tariff,                "roomType": booking.room_type.name,                "room": room,                "disCount": booking.discount,                "services": services_response,                # "place": booking.abs_price,                # "price": booking.abs_price + ssumma            })        return response    def cheques_list_method(self, booking: BookedRoomModel):        response = []        current_date = booking.start_date        while current_date <= booking.end_date:            tariff = BookedRoomTariffsModel.objects.filter(booked_room=booking).filter(                Q(start_date__lte=current_date) & Q(end_date__gte=current_date)            ).first()            response.append({"name": tariff.tariff.name, "day": str(current_date),                             "code": {"color": tariff.tariff.color, "code": 777},                             "pocket": {"color": tariff.tariff.color, "code": 777, "name": "tariff"}, "quantity": 1,                             "price": tariff.price, "status": tariff.is_paid,                             "transaction_date": str(tariff.modified_at), "paid_amount": tariff.price,                             "cashier": tariff.created_by.full_name})            room = BookedRoomRoomModel.objects.filter(booked_room=booking).filter(                Q(start_date__lte=current_date) & Q(end_date__gte=current_date)).first()            response.append({"name": room.room.room_number, "day": str(current_date),                             "code": {"color": room.room_type.color, "code": 666},                             "pocket": {"color": room.room_type.color, "code": 777, "name": room.room_type.name},                             "quantity": 1,                             "price": room.room.price, "status": room.is_paid,                             "transaction_date": str(room.modified_at), "paid_amount": room.price,                             "cashier": tariff.created_by.full_name})            for i in booking.purchased_services.filter(created_at=current_date).order_by("created_at"):                response.append({"name": i.service.service_name, "day": str(current_date),                                 "code": {"color": "	#00FFFF", "code": 111},                                 "pocket": {"color": "#ff0000", "code": 777, "name": "service"}, "quantity": i.quantity,                                 "price": i.service_price, "status": i.is_paid,                                 "transaction_date": str(i.modified_at), "paid_amount": 0,                                 "cashier": i.created_by.full_name})            current_date += datetime.timedelta(days=1)        return responseclass CreateBookingModelSerializer(serializers.Serializer):    tariff = serializers.CharField()    room = serializers.CharField()    room_type = serializers.CharField()    patients = serializers.IntegerField()    start_date = serializers.DateField(required=True)    end_date = serializers.DateField(required=True)class UpdateBookedRoomSerializer(serializers.ModelSerializer):    class Meta:        model = BookedRoomModel        fields = [            "tariff", "room_type", "room",            "patients", "start_date",            "end_date"        ]# class UpdateBookingModelSerializer(serializers.Serializer):#     tariff = serializers.CharField()#     room = serializers.CharField()#     room_type = serializers.CharField()#     patients = serializers.IntegerField()#     start_date = serializers.DateField(required=True)#     end_date = serializers.DateField(required=True)class FreeRoomDateRangeSerializer(serializers.Serializer):    start_date = serializers.DateField(required=False, allow_null=True)    end_date = serializers.DateField(required=False, allow_null=True)    class Meta:        fields = '__all__'