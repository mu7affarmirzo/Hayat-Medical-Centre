import datetimefrom rest_framework import serializersfrom apps.account.models import PatientModelfrom apps.logus.models import BookedRoomModelclass BookedRoomPatientSerializer(serializers.ModelSerializer):    age = serializers.SerializerMethodField("get_patient_age")    class Meta:        fields = ["age", "gender", ]        model = PatientModel    def get_patient_age(self, obj: PatientModel):        return datetime.date.today().year - obj.date_of_birth.yearclass BookedRoomModelSerializer(serializers.ModelSerializer):    number = serializers.CharField(source="id")    name = serializers.CharField(source="patients.full_name")    group = serializers.CharField(default="")    numberOfGuest = serializers.SerializerMethodField("guests_count_func")    roomType = serializers.CharField(source="room_type.name")    arrivalData = serializers.DateField(source="start_date")    departureDate = serializers.DateField(source="end_date")    room = serializers.CharField(source="room.room_number")    level = serializers.IntegerField(source="room.floor")    howManyTimesUsed = serializers.IntegerField(source="room.count")    occupied = serializers.BooleanField(source="room.is_available")    capacity = serializers.IntegerField(source="room.capacity")    balance = serializers.IntegerField(default=0)    paid = serializers.IntegerField(default=0)    class Meta:        model = BookedRoomModel        fields = ["number",                  "name",                  "group",                  "arrivalData",                  "departureDate",                  "roomType",                  "room",                  "numberOfGuest",                  "level",                  "howManyTimesUsed",                  "capacity",                  "occupied",                  "tariff",                  "duration",                  "balance",                  "paid",                  "discount",                  ]        read_only_fields = ["modified_by", "created_by"]    def guests_count_func(self, obj: BookedRoomModel):        today = datetime.date.today()        return BookedRoomModel.objects.filter(room=obj.room, start_date__lt=today, end_date__gt=today).count()    def get_living_patients_datas(self, obj: BookedRoomModel):        booked_rooms = BookedRoomModel.objects.filter(room_id=obj.room.id).select_related("patients")        return [{"age": i.patients.age, "gender": i.patients.gender} for i in booked_rooms]    # def get_room_number(self, obj: BookedRoomModel):    #     return obj.room.room_numberclass SearchPatientSerializer(serializers.Serializer):    word = serializers.CharField(max_length=255)class BookedRoomCreateSerializer(serializers.ModelSerializer):    discount = serializers.IntegerField(default=0)    patients = serializers.IntegerField()    room_price = serializers.IntegerField()    room = serializers.IntegerField()    class Meta:        model = BookedRoomModel        exclude = ["is_checked_out", "abs_price"]        read_only_fields = ["modified_by", "created_by"]