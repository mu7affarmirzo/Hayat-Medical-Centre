import datetimefrom django.shortcuts import get_object_or_404from drf_yasg.utils import swagger_auto_schemafrom rest_framework import statusfrom rest_framework.decorators import api_view, permission_classesfrom rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom api.v1.logus.serializers import RoomPriceSerializer, RoomsWithTariffType, BookedRoomModelSerializer, \    DaysGetSerializerfrom apps.logus.models import RoomPrice, TariffModel, RoomTypeModel, BookedRoomModelfrom apps.logus.models.room import TariffXTypeModel, RoomModel@swagger_auto_schema(method="get", tags=["logus-room-price"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def get_room_price_view(request):    tariff_type_prices = RoomPrice.objects.all()    serializer = RoomPriceSerializer(tariff_type_prices, many=True)    return Response(serializer.data)@swagger_auto_schema(method="get", tags=["logus-room-price"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def get_tariff_type_price_retrieve_view(request, pk):    tariff_type_price = get_object_or_404(RoomPrice, pk=pk)    serializer = RoomPriceSerializer(tariff_type_price)    return Response(serializer.data)@swagger_auto_schema(method="post", tags=["logus-room-price"], request_body=RoomPriceSerializer)@api_view(['POST'])@permission_classes((IsAuthenticated,))def create_tariff_type_price_view(request):    tariff_type_price = RoomPrice.objects.create(created_by=request.user, modified_by=request.user)    serializer = RoomPriceSerializer(tariff_type_price, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@swagger_auto_schema(method="put", tags=["logus-room-price"], request_body=RoomPriceSerializer)@api_view(['PUT'])@permission_classes((IsAuthenticated,))def update_tariff_type_price_view(request, pk):    tariff_type_price = get_object_or_404(RoomPrice, pk=pk)    tariff_type_price.modified_by = request.user    tariff_type_price.save()    serializer = RoomPriceSerializer(tariff_type_price, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@swagger_auto_schema(method="delete", tags=["logus-room-price"])@api_view(['DELETE'])@permission_classes((IsAuthenticated,))def delete_tariff_type_price_view(request, pk):    tariff_type_price = get_object_or_404(RoomPrice, pk=pk)    tariff_type_price.delete()    return Response(status=status.HTTP_204_NO_CONTENT)@swagger_auto_schema(method="post", tags=["logus-room-price"], request_body=DaysGetSerializer)@api_view(['POST'])@permission_classes((IsAuthenticated,))def post_tariff_room_price_view(request):    response = []    tariffs_list = TariffModel.objects.all()    types_list = RoomTypeModel.objects.all()    room_prices = RoomPrice.objects.all()    # rooms = RoomModel.objects.all()    for tariff_obj in tariffs_list:        context = {}        context["name"] = tariff_obj.name        context["color"] = tariff_obj.color        context["totalRooms"] = RoomPrice.objects.filter(tariff=tariff_obj).count()        context["availableRooms"] = RoomPrice.objects.filter(tariff=tariff_obj, room__is_available=True).count()        context["types"] = []        response.append(context)    for i in response:        for j in RoomPrice.objects.filter(tariff__name=i["name"]).distinct("room_type__name"):            types = {}            types["name"] = j.room_type.name            types["tag"] = j.room_type.tag            types["oneDayPrice"] = j.price            types["totalPrice"] = j.price * request.data["days"]            types["color"] = j.room_type.color            types["available"] = j.room.is_available            i["types"].append(types)    return Response(response)@swagger_auto_schema(method="post", tags=["logus-room-price"], request_body=RoomsWithTariffType)@api_view(['POST'])@permission_classes((IsAuthenticated,))def get_rooms_with_tariff_type_view(request):    start = datetime.datetime.now()    data = request.data    filters = {"room_price__tariff__name": data["tariff"],               "room_price__room_type__name": data["type"]}    if data.get("view"):        filters["room__view"] = data.get("view")    if data.get("floor"):        filters["room__floor"] = data.get("floor")    booked_rooms = BookedRoomModel.objects.filter(**filters)    serializer = BookedRoomModelSerializer(booked_rooms, many=True)    end = datetime.datetime.now() - start    print(end)    return Response(serializer.data)@swagger_auto_schema(method="get", tags=["logus-room-price"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def get_tariffxtype(request):    types = RoomTypeModel.objects.all()    tariffs = TariffModel.objects.all()    response = []    for type in types:        context = {}        context["id"] = type.id        context["name"] = type.name        context["tag"] = type.tag        context["color"] = type.color        context["tariffs"] = []        for i in tariffs:            tariff = {}            tariff["id"] = i.id            tariff["name"] = i.name            tariff["tag"] = i.tag            tariff["color"] = i.color            price = TariffXTypeModel.objects.filter(type=type, tariff=i).first()            tariff["price"] = price.tariff.price if price else None            context["tariffs"].append(tariff)        response.append(context)    return Response(response)