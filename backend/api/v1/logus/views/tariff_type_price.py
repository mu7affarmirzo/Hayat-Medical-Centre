from drf_yasg.utils import swagger_auto_schemafrom rest_framework import statusfrom rest_framework.decorators import api_view, permission_classesfrom rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom django.shortcuts import get_object_or_404from apps.logus.models import RoomPrice, TariffModel, RoomTypeModel, BookedRoomModelfrom api.v1.logus.serializers import RoomPriceSerializer, RoomsWithTariffType, BookedRoomModelSerializer@swagger_auto_schema(method="get", tags=["logus-room-price"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def get_room_price_view(request):    tariff_type_prices = RoomPrice.objects.all()    serializer = RoomPriceSerializer(tariff_type_prices, many=True)    return Response(serializer.data)@swagger_auto_schema(method="get", tags=["logus-room-price"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def get_tariff_type_price_retrieve_view(request, pk):    tariff_type_price = get_object_or_404(RoomPrice, pk=pk)    serializer = RoomPriceSerializer(tariff_type_price)    return Response(serializer.data)@swagger_auto_schema(method="post", tags=["logus-room-price"], request_body=RoomPriceSerializer)@api_view(['POST'])@permission_classes((IsAuthenticated,))def create_tariff_type_price_view(request):    tariff_type_price = RoomPrice.objects.create(created_by=request.user, modified_by=request.user)    serializer = RoomPriceSerializer(tariff_type_price, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@swagger_auto_schema(method="put", tags=["logus-room-price"], request_body=RoomPriceSerializer)@api_view(['PUT'])@permission_classes((IsAuthenticated,))def update_tariff_type_price_view(request, pk):    tariff_type_price = get_object_or_404(RoomPrice, pk=pk)    tariff_type_price.modified_by = request.user    tariff_type_price.save()    serializer = RoomPriceSerializer(tariff_type_price, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@swagger_auto_schema(method="delete", tags=["logus-room-price"])@api_view(['DELETE'])@permission_classes((IsAuthenticated,))def delete_tariff_type_price_view(request, pk):    tariff_type_price = get_object_or_404(RoomPrice, pk=pk)    tariff_type_price.delete()    return Response(status=status.HTTP_204_NO_CONTENT)@swagger_auto_schema(method="get", tags=["logus-room-price"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def get_tariff_room_price_view(request):    response = {}    tariffs_list = TariffModel.objects.all()    types_list = RoomTypeModel.objects.all()    room_prices = RoomPrice.objects.all()    for type_obj in types_list:        context = {}        for tariff_obj in tariffs_list:            context[tariff_obj.name] = None        response[type_obj.name] = context    for room_price in room_prices:        response[room_price.room_type.name][room_price.tariff.name] = room_price.price    return Response(response)@swagger_auto_schema(method="post", tags=["logus-room-price"], request_body=RoomsWithTariffType)@api_view(['POST'])@permission_classes((IsAuthenticated,))def get_rooms_with_tariff_type_view(request):    data = request.data    filters = {"room_price__tariff__name": data["tariff"],               "room_price__room_type__name": data["type"]}    if data.get("view"):        filters["room__view"] = data.get("view")    if data.get("floor"):        filters["room__floor"] = data.get("floor")    booked_rooms = BookedRoomModel.objects.filter(**filters)    serializer = BookedRoomModelSerializer(booked_rooms, many=True)    return Response(serializer.data)