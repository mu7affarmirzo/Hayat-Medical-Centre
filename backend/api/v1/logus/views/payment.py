from django.shortcuts import get_object_or_404from drf_yasg.utils import swagger_auto_schemafrom rest_framework.decorators import api_view, permission_classesfrom rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom api.v1.logus.serializers import PaymentCreateSerializer, PaymentCreateWholeSerializerfrom apps.logus.models import AdditionallyPurchasedServicesModel, BookedRoomRoomModel, BookedRoomTariffsModel, Payments@swagger_auto_schema(method="post", tags=["logus-payment"], request_body=PaymentCreateSerializer)@api_view(['POST'])@permission_classes((IsAuthenticated,))def singular_payment_view(request):    data = request.data    payment = Payments(payment_method="singular", created_by=request.user, modified_by=request.user)    serializer = PaymentCreateSerializer(payment, data=data)    if serializer.is_valid():        serializer.save()        cheque_id = data["logus_cheque_id"]        pocket = data["pocket_type"]        if pocket == "additional service":            cheque = get_object_or_404(AdditionallyPurchasedServicesModel, pk=cheque_id)            cheque.is_paid = True            cheque.save(update_fields=["is_paid"])        elif pocket == "tariff":            cheque = get_object_or_404(BookedRoomTariffsModel, pk=cheque_id)            cheque.is_paid = True            cheque.save(update_fields=["is_paid"])        elif pocket == "room":            cheque = get_object_or_404(BookedRoomRoomModel, pk=cheque_id)            cheque.is_paid = True            cheque.save(update_fields=["is_paid"])        return Response(status=201)    else:        return Response(serializer.errors)@swagger_auto_schema(method="post", tags=["logus-payment"], request_body=PaymentCreateWholeSerializer)@api_view(['POST'])@permission_classes((IsAuthenticated,))def whole_payment_view(request):    data = request.data    payment = Payments(payment_method="whole_check", pocket_type="whole_check",                       created_by=request.user, modified_by=request.user)    serializer = PaymentCreateWholeSerializer(payment, data=data)    if serializer.is_valid():        instance: Payments = serializer.save()        tariffs = BookedRoomTariffsModel.objects.filter(booked_room=instance.booked_room, is_paid=False)        for i in tariffs:            i.is_paid = True            i.save(update_fields=["is_paid"])        rooms = BookedRoomRoomModel.objects.filter(booked_room=instance.booked_room, is_paid=False)        for i in rooms:            i.is_paid = True            i.save(update_fields=["is_paid"])        services = AdditionallyPurchasedServicesModel.objects.filter(booked_room=instance.booked_room, is_paid=False)        for i in services:            i.is_paid = True            i.save(update_fields=["is_paid"])        return Response(status=200)    else:        return Response(serializer.errors)