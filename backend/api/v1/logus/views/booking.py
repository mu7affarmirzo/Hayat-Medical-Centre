import datetimefrom django.db.models import Q, Sumfrom django.shortcuts import get_object_or_404from drf_yasg.utils import swagger_auto_schemafrom rest_framework import statusfrom rest_framework.decorators import api_view, permission_classesfrom rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom api.v1.logus.serializers import BookingModelSerializer, BookedRoomModelSerializer, FreeRoomDateRangeSerializer, \    BookedRoomModel, CreateBookingModelSerializerfrom api.v1.logus.services.booking_series import generate_seriafrom apps.account.models import PatientModelfrom apps.logus.models import BookingModel, RoomTypeModel, RoomModel, TariffModel@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def get_booking_view(request):    bookings = BookedRoomModel.objects.all()    serializer = BookingModelSerializer(bookings, many=True)    return Response(serializer.data)@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def get_booking_retrieve_view(request, pk):    booking = get_object_or_404(BookedRoomModel, pk=pk)    serializer = BookingModelSerializer(booking)    return Response(serializer.data)@swagger_auto_schema(method="post", tags=["logus-booking"], request_body=CreateBookingModelSerializer)@api_view(['POST'])@permission_classes((IsAuthenticated,))def create_booking_view(request, seria=None):    serializer = CreateBookingModelSerializer(data=request.data)    if serializer.is_valid():        series = generate_seria(request.user, serializer.validated_data['start_date'],                                serializer.validated_data['end_date'])        if seria:            book = get_object_or_404(BookingModel, seria=seria)        else:            book = BookingModel(created_by=request.user, modified_by=request.user, series=series)            book.save()        booking = BookedRoomModel(booking=book, created_by=request.user, modified_by=request.user)        booking.start_date = serializer.validated_data['start_date']        booking.end_date = serializer.validated_data['end_date']        room = RoomModel.objects.filter(room_number=serializer.validated_data['room']).first()        room_type = RoomTypeModel.objects.filter(name=serializer.validated_data['room_type']).first()        patient = PatientModel.objects.filter(id=serializer.validated_data['patients']).first()        tariff = TariffModel.objects.filter(name=serializer.validated_data['tariff']).first()        if room and room_type and patient and tariff:            booking.tariff = tariff            booking.patients = patient            booking.room = room            booking.room_type = room_type            booking.save()        else:            if room is None:                return Response({"message": "Room is not found"}, status=status.HTTP_404_NOT_FOUND)            elif room_type is None:                return Response({"message": "Room Type is not found"}, status=status.HTTP_404_NOT_FOUND)            elif patient is None:                return Response({"message": "Patient is not found"}, status=status.HTTP_404_NOT_FOUND)            elif tariff is None:                return Response({"message": "Tariff is not found"}, status=status.HTTP_404_NOT_FOUND)        response_serializer = BookingModelSerializer(booking)        return Response(response_serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@swagger_auto_schema(method="put", tags=["logus-booking"], request_body=BookingModelSerializer)@api_view(['PUT'])@permission_classes((IsAuthenticated,))def update_booking_view(request, pk):    booking = get_object_or_404(BookingModel, pk=pk)    booking.modified_by = request.user    booking.save()    serializer = BookingModelSerializer(booking, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@swagger_auto_schema(method="delete", tags=["logus-booking"])@api_view(['DELETE'])@permission_classes((IsAuthenticated,))def delete_booking_view(request, pk):    booking = get_object_or_404(BookingModel, pk=pk)    booking.delete()    return Response(status=status.HTTP_204_NO_CONTENT)@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def expected_arrival_view(request):    today = datetime.date.today()    booked_room = BookedRoomModel.objects.filter(start_date__gt=today)    serializer = BookedRoomModelSerializer(booked_room, many=True)    return Response(serializer.data)@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def residents_view(request):    today = datetime.date.today()    booked_room = BookedRoomModel.objects.filter(start_date__lt=today, end_date__gt=today)    serializer = BookedRoomModelSerializer(booked_room, many=True)    return Response(serializer.data)@swagger_auto_schema(method="post", tags=["logus-booking"], request_body=FreeRoomDateRangeSerializer)@api_view(['POST'])@permission_classes((IsAuthenticated,))def free_rooms_view(request):    data = request.data    response_list = []    types = RoomTypeModel.objects.all()    if data.get("start_date") and data.get("end_date"):        start_date = datetime.datetime.strptime(request.data["start_date"], "%Y-%m-%d").date()        end_date = datetime.datetime.strptime(request.data["end_date"], "%Y-%m-%d").date()        delta_date = (end_date - start_date)        delta_date = delta_date.days    else:        start_date = datetime.date.today()        delta_date = 15    total_rooms = RoomModel.objects.filter(is_available=True, room_type__isnull=False)    for i in range(delta_date + 1):        context = {}        context["total"] = total_rooms.aggregate(summa=Sum("capacity"))["summa"]        context["date"] = str(start_date + datetime.timedelta(days=i))        context["types"] = []        date_case = start_date + datetime.timedelta(days=i)        booked_rooms = BookedRoomModel.objects.filter(Q(start_date__gte=date_case) & Q(end_date__lte=date_case))        for type in types:            type_context = {"name": type.name,                            "color": type.color,                            "tag": type.tag,                            "count": total_rooms.filter(room_type=type).aggregate(summa=Sum("capacity"))["summa"] -                                     booked_rooms.filter(room__room_type=type).count()}            context["types"].append(type_context)        response_list.append(context)    return Response(data=response_list)@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def expected_departure_view(request):    today = datetime.date.today()    booked_room = BookedRoomModel.objects.filter(end_date__gt=today)    serializer = BookedRoomModelSerializer(booked_room, many=True)    return Response(serializer.data)