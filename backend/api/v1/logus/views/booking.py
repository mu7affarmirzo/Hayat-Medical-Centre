import datetimefrom drf_yasg.utils import swagger_auto_schemafrom rest_framework import statusfrom rest_framework.decorators import api_view, permission_classesfrom rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom django.shortcuts import get_object_or_404from apps.logus.models import BookingModelfrom api.v1.logus.serializers import BookingModelSerializer@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])def get_booking_view(request):    bookings = BookingModel.objects.all()    serializer = BookingModelSerializer(bookings, many=True)    return Response(serializer.data)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])def get_booking_retrieve_view(request, pk):    booking = get_object_or_404(BookingModel, pk=pk)    serializer = BookingModelSerializer(booking)    return Response(serializer.data)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="post", tags=["logus-booking"], request_body=BookingModelSerializer)@api_view(['POST'])def create_booking_view(request):    booking = BookingModel(created_by=request.user, modified_by=request.user)    serializer = BookingModelSerializer(booking, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="put", tags=["logus-booking"], request_body=BookingModelSerializer)@api_view(['PUT'])def update_booking_view(request, pk):    booking = get_object_or_404(BookingModel, pk=pk)    booking.modified_by = request.user    booking.save()    serializer = BookingModelSerializer(booking, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="delete", tags=["logus-booking"])@api_view(['DELETE'])def delete_booking_view(request, pk):    booking = get_object_or_404(BookingModel, pk=pk)    booking.delete()    return Response(status=status.HTTP_204_NO_CONTENT)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])def expected_arrival_view(request):    today = datetime.date.today()    booked_room = BookingModel.objects.filter(start_date__gt=today)    serializer = BookingModelSerializer(booked_room, many=True)    return Response(serializer.data)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])def residents_view(request):    today = datetime.date.today()    booked_room = BookingModel.objects.filter(start_date__lt=today, end_date__gt=today)    serializer = BookingModelSerializer(booked_room, many=True)    return Response(serializer.data)