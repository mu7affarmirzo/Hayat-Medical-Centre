import datetimefrom drf_yasg.utils import swagger_auto_schemafrom rest_framework import statusfrom rest_framework.decorators import api_view, permission_classesfrom rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom django.shortcuts import get_object_or_404from apps.logus.models import BookingModel, RoomTypeModelfrom api.v1.logus.serializers import BookingModelSerializer, BookedRoomModelSerializer, FreeRoomDateRangeSerializer, \    BookedRoomModel@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def get_booking_view(request):    bookings = BookingModel.objects.all()    serializer = BookingModelSerializer(bookings, many=True)    return Response(serializer.data)@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def get_booking_retrieve_view(request, pk):    booking = get_object_or_404(BookingModel, pk=pk)    serializer = BookingModelSerializer(booking)    return Response(serializer.data)@swagger_auto_schema(method="post", tags=["logus-booking"], request_body=BookingModelSerializer)@api_view(['POST'])@permission_classes((IsAuthenticated,))def create_booking_view(request):    booking = BookingModel(created_by=request.user, modified_by=request.user)    serializer = BookingModelSerializer(booking, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@swagger_auto_schema(method="put", tags=["logus-booking"], request_body=BookingModelSerializer)@api_view(['PUT'])@permission_classes((IsAuthenticated,))def update_booking_view(request, pk):    booking = get_object_or_404(BookingModel, pk=pk)    booking.modified_by = request.user    booking.save()    serializer = BookingModelSerializer(booking, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@swagger_auto_schema(method="delete", tags=["logus-booking"])@api_view(['DELETE'])@permission_classes((IsAuthenticated,))def delete_booking_view(request, pk):    booking = get_object_or_404(BookingModel, pk=pk)    booking.delete()    return Response(status=status.HTTP_204_NO_CONTENT)@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def expected_arrival_view(request):    today = datetime.date.today()    booked_room = BookedRoomModel.objects.filter(start_date__gt=today)    serializer = BookedRoomModelSerializer(booked_room, many=True)    return Response(serializer.data)@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def residents_view(request):    today = datetime.date.today()    booked_room = BookedRoomModel.objects.filter(start_date__lt=today, end_date__gt=today)    serializer = BookedRoomModelSerializer(booked_room, many=True)    return Response(serializer.data)@swagger_auto_schema(method="post", tags=["logus-booking"], request_body=FreeRoomDateRangeSerializer)@api_view(['POST'])@permission_classes((IsAuthenticated,))def free_rooms_view(request):    data = request.data    response_list = {}    if data.get("start_date") and data.get("end_date"):        start_date = datetime.datetime.strptime(request.data["start_date"], "%Y-%m-%d").date()        end_date = datetime.datetime.strptime(request.data["end_date"], "%Y-%m-%d").date()        delta_date = (end_date - start_date)        delta_date = delta_date.days    else:        start_date = datetime.date.today()        delta_date = 15    types = RoomTypeModel.objects.all()    for i in range(delta_date + 1):        context = {}        for j in types:            context[j.name] = 0        response_list[str(start_date + datetime.timedelta(days=i))] = context    for i in range(delta_date + 1):        context = response_list[str(start_date + datetime.timedelta(days=i))]        for j in types:            for k in BookedRoomModel.objects.filter(room_price__room_type=j, is_checked_out=False):                if k.end_date <= start_date + datetime.timedelta(days=i):                    context[j.name] += 1        response_list[str(start_date + datetime.timedelta(days=i))] = context    return Response(data=response_list)@swagger_auto_schema(method="get", tags=["logus-booking"])@api_view(['GET'])@permission_classes((IsAuthenticated,))def expected_departure_view(request):    today = datetime.date.today()    booked_room = BookedRoomModel.objects.filter(end_date__gt=today)    serializer = BookedRoomModelSerializer(booked_room, many=True)    return Response(serializer.data)