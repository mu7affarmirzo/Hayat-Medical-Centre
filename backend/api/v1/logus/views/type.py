from drf_yasg.utils import swagger_auto_schemafrom rest_framework import statusfrom rest_framework.decorators import api_view, permission_classesfrom rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom django.shortcuts import get_object_or_404from apps.logus.models import TypeModelfrom api.v1.logus.serializers import TypeModelSerializer@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="get", tags=["logus-type"])@api_view(['GET'])def get_type_view(request):    type_obj = TypeModel.objects.all()    serializer = TypeModelSerializer(type_obj, many=True)    return Response(serializer.data)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="get", tags=["logus-type"])@api_view(['GET'])def get_type_retrieve_view(request, pk):    type_obj = get_object_or_404(TypeModel, pk=pk)    serializer = TypeModelSerializer(type_obj)    return Response(serializer.data)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="post", tags=["logus-type"], request_body=TypeModelSerializer)@api_view(['POST'])def create_type_view(request):    type_obj = TypeModel.objects.create(created_by=request.user, modified_by=request.user)    serializer = TypeModelSerializer(type_obj, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="put", tags=["logus-type"], request_body=TypeModelSerializer)@api_view(['PUT'])def update_type_view(request, pk):    type_obj = get_object_or_404(TypeModel, pk=pk)    type_obj.modified_by = request.user    type_obj.save()    serializer = TypeModelSerializer(type_obj, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="delete", tags=["logus-type"])@api_view(['DELETE'])def delete_type_view(request, pk):    income_item = get_object_or_404(TypeModel, pk=pk)    income_item.delete()    return Response(status=status.HTTP_204_NO_CONTENT)