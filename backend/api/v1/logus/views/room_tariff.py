from drf_yasg.utils import swagger_auto_schemafrom rest_framework import statusfrom rest_framework.decorators import api_view, permission_classesfrom rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom django.shortcuts import get_object_or_404from apps.logus.models import RoomTariffModelfrom api.v1.logus.serializers import RoomTariffModelSerializer@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="get", tags=["logus-room-tariff"])@api_view(['GET'])def get_room_tariff_view(request):    room_tariffs = RoomTariffModel.objects.all()    serializer = RoomTariffModelSerializer(room_tariffs, many=True)    return Response(serializer.data)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="get", tags=["logus-room-tariff"])@api_view(['GET'])def get_room_tariff_retrieve_view(request, pk):    room_tariff = get_object_or_404(RoomTariffModel, pk=pk)    serializer = RoomTariffModelSerializer(room_tariff)    return Response(serializer.data)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="post", tags=["logus-room-tariff"], request_body=RoomTariffModelSerializer)@api_view(['POST'])def create_room_tariff_view(request):    room_tariff = RoomTariffModel(created_by=request.user, modified_by=request.user)    serializer = RoomTariffModelSerializer(room_tariff, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="put", tags=["logus-room-tariff"], request_body=RoomTariffModelSerializer)@api_view(['PUT'])def update_room_tariff_view(request, pk):    room_tariff = get_object_or_404(RoomTariffModel, pk=pk)    room_tariff.modified_by = request.user    room_tariff.save()    serializer = RoomTariffModelSerializer(room_tariff, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=status.HTTP_201_CREATED)    return Response(status=status.HTTP_400_BAD_REQUEST)@permission_classes((IsAuthenticated,))@swagger_auto_schema(method="delete", tags=["logus-room-tariff"])@api_view(['DELETE'])def delete_room_tariff_view(request, pk):    room_tariff = get_object_or_404(RoomTariffModel, pk=pk)    room_tariff.delete()    return Response(status=status.HTTP_204_NO_CONTENT)