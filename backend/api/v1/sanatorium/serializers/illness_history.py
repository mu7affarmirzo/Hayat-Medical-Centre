from rest_framework import serializersfrom api.v1.logus.serializers import BookingModelSerializer, DoctorsBookingModelSerializerfrom api.v1.organizations.serializers import PatientModelSerializer, DoctorAccountListSerializerfrom api.v1.sanatorium.serializers.appointments import BaseMedicalServicesSerializer, BaseLabResearchServiceSerializer, \    BaseProceduresSerializer, BasePPillsInjectionsSerializer, createfrom apps.account.models import MedicalService, SpecialityModelfrom apps.sanatorium.models import IllnessHistory, ProfessionsModel, ToxicFactorsModel, TagsModel, DiagnosisTemplate, \    ComplaintModel, BaseMedicalServiceModel, BaseLabResearchServiceModel, BaseProcedureServiceModel, \    BasePillsInjectionsModelfrom apps.sanatorium.models.consulting import InitialAppointmentWithDoctorModel, BasicTemplateModel, \    InitialAppointmentMedicalServiceModel, InitialAppointmentProcedureServiceModel, \    InitialAppointmentPillsInjectionsModel, InitialAppointmentLabResearchServiceModelclass ProfessionModelSerializer(serializers.ModelSerializer):    class Meta:        model = ProfessionsModel        fields = "__all__"class ToxicFactorsModelSerializer(serializers.ModelSerializer):    class Meta:        model = ToxicFactorsModel        fields = "__all__"class TagsModelSerializer(serializers.ModelSerializer):    class Meta:        model = TagsModel        fields = "__all__"class ComplaintModelSerializer(serializers.ModelSerializer):    class Meta:        model = ComplaintModel        fields = "__all__"class DiagnosisTemplateSerializer(serializers.ModelSerializer):    class Meta:        model = DiagnosisTemplate        fields = "__all__"class IllnessHistorySerializer(serializers.ModelSerializer):    patient = PatientModelSerializer()    booking = BookingModelSerializer()    profession = ProfessionModelSerializer()    toxic_factors = ToxicFactorsModelSerializer(many=True)    tags = TagsModelSerializer()    diagnosis = DiagnosisTemplateSerializer()    at_arrival_diagnosis = DiagnosisTemplateSerializer()    nurse = DoctorAccountListSerializer(many=True)    doctor = DoctorAccountListSerializer()    class Meta:        model = IllnessHistory        fields = "__all__"class IllnessHistoryUpdateSerializer(serializers.ModelSerializer):    class Meta:        model = IllnessHistory        fields = ["profession", "toxic_factors",                  "tags", "at_arrival_diagnosis", "diagnosis", "nurse",                  "doctor"]class SearchtSerializer(serializers.Serializer):    word = serializers.CharField(max_length=255)# ---------------------------# DOCTORS VIEW SERIALIZERS# ---------------------------# class DoctorsBookingSerializer():#     patients = PatientModelSerializer()#     room = RoomModelSerializer()#     room_type = RoomTypeModelSerializer()#     living = serializers.SerializerMethodField("days_list_method")#     cheques = serializers.SerializerMethodField("cheques_list_method")##     class Meta:#         model = BookedRoomModel#         exclude = ["modified_by", "created_by"]##     def days_list_method(self, booking: BookedRoomModel):#         step = datetime.timedelta(days=1)#         date_range = [booking.start_date + i * step for i in range((booking.end_date - booking.start_date).days + 1)]#         response = []#         for i in date_range:#             services = booking.purchased_services.filter(created_at__date=i)#             room = BookedRoomRoomModel.objects.filter(booked_room=booking).filter(#                 Q(start_date__gte=i) & Q(end_date__lte=i)).first()#             room = BookedRoomRoomModelSerializer(room).data#             tariff = BookedRoomTariffsModel.objects.filter(booked_room=booking).filter(#                 Q(start_date__gte=i) & Q(end_date__lte=i)).first()#             tariff = BookedRoomTariffsModelSerializer(tariff).data#             ssumma = 0#             services_response = [{"name": i.service.service_name, "price": i.service.price} for i in services]#             for x in services_response:#                 ssumma += x.get("price")#             response.append({#                 "date": str(i),#                 "scheme": booking.patients.age,#                 "tariff": tariff,#                 "roomType": booking.room_type.name,#                 "room": room,#                 "disCount": booking.discount,#                 "services": services_response,#                 # "place": booking.abs_price,#                 # "price": booking.abs_price + ssumma#             })#         return response##     def cheques_list_method(self, booking: BookedRoomModel):#         response = []##         current_date = booking.start_date#         while current_date <= booking.end_date:#             tariff = BookedRoomTariffsModel.objects.filter(booked_room=booking).filter(#                 Q(start_date__lte=current_date) & Q(end_date__gte=current_date)#             ).first()#             response.append({"id": tariff.id, "name": tariff.tariff.name, "day": str(current_date),#                              "code": {"color": tariff.tariff.color, "code": 777},#                              "pocket": {"color": tariff.tariff.color, "code": 777, "name": "tariff"}, "quantity": 1,#                              "price": tariff.price, "status": tariff.is_paid,#                              "transaction_date": str(tariff.modified_at), "paid_amount": tariff.price,#                              "cashier": tariff.created_by.full_name})#             room = BookedRoomRoomModel.objects.filter(booked_room=booking).filter(#                 Q(start_date__lte=current_date) & Q(end_date__gte=current_date)).first()#             response.append({"id": room.id, "name": room.room.room_number, "day": str(current_date),#                              "code": {"color": room.room_type.color, "code": 666},#                              "pocket": {"color": room.room_type.color, "code": 777, "name": room.room_type.name},#                              "quantity": 1,#                              "price": room.room.price, "status": room.is_paid,#                              "transaction_date": str(room.modified_at), "paid_amount": room.price,#                              "cashier": tariff.created_by.full_name})##             for i in booking.purchased_services.filter(created_at=current_date).order_by("created_at"):#                 response.append({"id": i.id, "name": i.service.service_name, "day": str(current_date),#                                  "code": {"color": "	#00FFFF", "code": 111},#                                  "pocket": {"color": "#ff0000", "code": 777, "name": "service"}, "quantity": i.quantity,#                                  "price": i.service_price, "status": i.is_paid,#                                  "transaction_date": str(i.modified_at), "paid_amount": 0,#                                  "cashier": i.created_by.full_name})#             current_date += datetime.timedelta(days=1)#         return responseclass DoctorsIllnessHistorySerializer(serializers.ModelSerializer):    patient = PatientModelSerializer()    booking = DoctorsBookingModelSerializer()    profession = ProfessionModelSerializer()    toxic_factors = ToxicFactorsModelSerializer(many=True)    tags = TagsModelSerializer()    diagnosis = DiagnosisTemplateSerializer()    nurse = DoctorAccountListSerializer(many=True)    doctor = DoctorAccountListSerializer()    class Meta:        model = IllnessHistory        fields = "__all__"class IAMedicalServicesSerializer(serializers.ModelSerializer):    class Meta:        model = InitialAppointmentMedicalServiceModel        fields = [            'medical_service',            'price',            'consulted_doctor',            'state',        ]class IAProceduresSerializer(serializers.ModelSerializer):    class Meta:        model = InitialAppointmentProcedureServiceModel        fields = [            'medical_service',            'price',            'state',            'quantity',            'start_date',            'frequency',            'comments',        ]class IALabResearchServicSerializer(serializers.ModelSerializer):    class Meta:        model = InitialAppointmentLabResearchServiceModel        fields = [            'lab',            'price',            'state',            'start_date',            'comments',        ]class IAPPillsInjectionsSerializer(serializers.ModelSerializer):    class Meta:        model = InitialAppointmentPillsInjectionsModel        fields = [            'pills_injections',            'price',            'state',            'quantity',            'period_days',            'start_date',            'end_date',            'frequency',            'comments',            'instruction'        ]class InitialAppointmentWithDoctorSerializer(serializers.ModelSerializer):    medical_services = BaseMedicalServicesSerializer(many=True)    lab_research = BaseLabResearchServiceSerializer(many=True)    procedures = BaseProceduresSerializer(many=True)    pills = BasePPillsInjectionsSerializer(many=True)    class Meta:        model = InitialAppointmentWithDoctorModel        fields = '__all__'        read_only = [            'created_by',            'created_at',            'modified_at',            'modified_by',            'doctor'        ]    def create(self, validated_data):        result = create(validated_data, InitialAppointmentWithDoctorModel, 'initial')        return resultclass GetInitialAppointmentWithDoctorSerializer(serializers.ModelSerializer):    medical_services = serializers.SerializerMethodField('get_medical_services')    lab_research = serializers.SerializerMethodField('get_lab_research')    procedures = serializers.SerializerMethodField('get_procedures')    pills = serializers.SerializerMethodField('get_pills')    class Meta:        model = InitialAppointmentWithDoctorModel        fields = '__all__'    def get_medical_services(self, obj):        tr = BaseMedicalServiceModel.objects.filter(model_type='initial', model_ref_id=obj.id)        medical_services = BaseMedicalServicesSerializer(tr, many=True)        return medical_services.data    def get_lab_research(self, obj):        tr = BaseLabResearchServiceModel.objects.filter(model_type='initial', model_ref_id=obj.id)        lab_research = BaseLabResearchServiceSerializer(tr, many=True)        return lab_research.data    def get_procedures(self, obj):        tr = BaseProcedureServiceModel.objects.filter(model_type='initial', model_ref_id=obj.id)        procedures = BaseProceduresSerializer(tr, many=True)        return procedures.data    def get_pills(self, obj):        tr = BasePillsInjectionsModel.objects.filter(model_type='initial', model_ref_id=obj.id)        pills = BasePPillsInjectionsSerializer(tr, many=True)        return pills.dataclass BasicTemplateModelSerializer(serializers.ModelSerializer):    class Meta:        model = BasicTemplateModel        fields = "__all__"class PostBasicTemplateModelSerializer(serializers.Serializer):    category = serializers.CharField()    name = serializers.CharField()    code = serializers.CharField()class MedServicesSerializer(serializers.ModelSerializer):    class Meta:        model = MedicalService        fields = '__all__'class MedServicesSpecialtyListSerializer(serializers.ModelSerializer):    med_service_specialty = serializers.SerializerMethodField()    class Meta:        model = SpecialityModel        fields = [            'id',            'name',            'branch',            'color',            'med_service_specialty'        ]    def get_med_service_specialty(self, instance):        med_services = instance.med_service_specialty.filter(type='service')        return MedServicesSerializer(med_services, many=True).dataclass ProcedureListSerializer(serializers.ModelSerializer):    med_service_specialty = serializers.SerializerMethodField()    class Meta:        model = SpecialityModel        fields = [            'id',            'name',            'branch',            'color',            'med_service_specialty'        ]    def get_med_service_specialty(self, instance):        med_services = instance.med_service_specialty.filter(type='procedure')        return MedServicesSerializer(med_services, many=True).data