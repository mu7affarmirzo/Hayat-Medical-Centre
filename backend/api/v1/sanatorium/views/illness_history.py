from django.db.models import Q, Countfrom drf_yasg.utils import swagger_auto_schemafrom rest_framework.decorators import permission_classes, api_viewfrom rest_framework.generics import get_object_or_404from rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom api.v1.sanatorium.serializers import *from apps.sanatorium.models import *@swagger_auto_schema(tags=['sanatorium'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def illness_history_view(request):    ill_his = IllnessHistory.objects.all()    serializer = IllnessHistorySerializer(ill_his, many=True)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def illness_history_view2(request):    context = []    ill_his = IllnessHistory.objects.all()    for i in ill_his:        context.append(            {"id": i.id, "status": i.type, "patient": i.patient.full_name, "gender": i.patient.gender,             "room": i.booking.room.room_number, "room_type": i.booking.room.room_type.name, "age": i.patient.age,             "tariff": i.booking.tariff.name, "start_date": i.booking.start_date, "end_date": i.booking.end_date}        )    return Response(context)@swagger_auto_schema(tags=['sanatorium'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def illness_history_id_view(request, pk):    ill_his = get_object_or_404(IllnessHistory, pk=pk)    serializer = IllnessHistorySerializer(ill_his)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def illness_history_id_view(request, pk):    ill_his = get_object_or_404(IllnessHistory, pk=pk)    serializer = IllnessHistorySerializer(ill_his)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium'], method="post", request_body=SearchtSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def illness_history_search_view(request):    word = request.data["word"]    illness_histories = IllnessHistory.objects.filter(        Q(series_number__icontains=word) | Q(patient__f_name__icontains=word) | Q(patient__l_name__icontains=word) | Q(            patient__mobile_phone_number__icontains=word) | Q(patient__doc_number__icontains=word))    serializer = IllnessHistorySerializer(illness_histories, many=True)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium'], method="put", request_body=IllnessHistoryUpdateSerializer)@api_view(['PUT', ])@permission_classes((IsAuthenticated,))def illness_history_update_view(request, pk):    ill_his = get_object_or_404(IllnessHistory, pk=pk)    serializer = IllnessHistoryUpdateSerializer(ill_his, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data)    return Response(serializer.errors)@swagger_auto_schema(tags=['sanatorium-diagnosis'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def get_diagnosis_view(request):    diagnosis = DiagnosisTemplate.objects.all()    serializer = DiagnosisTemplateSerializer(diagnosis, many=True)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium-diagnosis'], method="post", request_body=DiagnosisTemplateSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def post_diagnosis_view(request):    serializer = DiagnosisTemplateSerializer(data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data)    return Response(serializer.errors)@swagger_auto_schema(tags=['sanatorium'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def get_tags_view(request):    tags = TagsModel.objects.all()    serializer = TagsModelSerializer(tags, many=True)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium'], method="post", request_body=TagsModelSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def post_tags_view(request):    serializer = TagsModelSerializer(data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data)    return Response(serializer.errors)@swagger_auto_schema(tags=['sanatorium'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def get_professions_view(request):    profs = ProfessionsModel.objects.all()    serializer = ProfessionModelSerializer(profs, many=True)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium'], method="post", request_body=ProfessionModelSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def post_professions_view(request):    serializer = ProfessionModelSerializer(data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data)    return Response(serializer.errors)@swagger_auto_schema(tags=['sanatorium'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def get_toxics_view(request):    toxics = ToxicFactorsModel.objects.all()    serializer = ToxicFactorsModelSerializer(toxics, many=True)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium'], method="post", request_body=ToxicFactorsModelSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def post_toxics_view(request):    serializer = ToxicFactorsModelSerializer(data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data)    return Response(serializer.errors)@swagger_auto_schema(tags=['sanatorium'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def get_complaints_view(request):    complaints = ComplaintModel.objects.all()    serializer = ComplaintModelSerializer(complaints, many=True)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium'], method="post", request_body=ComplaintModelSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def post_complaints_view(request):    serializer = ComplaintModelSerializer(data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data)    return Response(serializer.errors)@swagger_auto_schema(tags=['sanatorium'], method="post", request_body=SearchtSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def search_patient_with_booking_view(request):    word = request.data["word"]    patients_with_bookings = PatientModel.objects.annotate(        num_bookings=Count('booked_rooms', filter=Q(booked_rooms__is_checked_out=False))).filter(        Q(f_name__icontains=word) | Q(mid_name__icontains=word) | Q(l_name__icontains=word) | Q(            email__icontains=word)).distinct().query    serializer = PatientModelSerializer(patients_with_bookings, many=True)    return Response(serializer.errors)@swagger_auto_schema(tags=['sanatorium'], method="post")@api_view(['POST', ])@permission_classes((IsAuthenticated,))def close_illness_history_view(request, pk):    illness = get_object_or_404(IllnessHistory, pk=pk)    illness.state = "closed"    illness.save(update_fields=["state"])    return Response(status=200)@swagger_auto_schema(tags=['sanatorium'], method="delete")@api_view(['DELETE', ])@permission_classes((IsAuthenticated,))def del_illness_history_view(request, pk):    illness = get_object_or_404(IllnessHistory, pk=pk)    illness.delete()    return Response(status=200)@swagger_auto_schema(tags=['sanatorium'], method="get", )@api_view(['GET', ])@permission_classes((IsAuthenticated,))def get_doctor_patients(request):    user = request.user    # query_params    full_name = request.query_params.get('full_name')    first_name = None    last_name = None    mid_name = None    if full_name:        names = full_name.split()        if len(names) > 1:            first_name = names[0]            last_name = names[-1]            mid_name = names[1] if len(names) > 2 else None        else:            first_name = names[0]    ib = request.query_params.get('ib')    card_type = request.query_params.get('full_name')    word = request.query_params.get('word')    patients_response = []    patients = IllnessHistory.objects.filter(doctor=user)    if first_name:        patients = patients.filter(patient__f_name=first_name)    if mid_name:        patients = patients.filter(patient__mid_name=mid_name)    if last_name:        patients = patients.filter(patient__l_name=last_name)    if ib:        patients = patients.filter(series_number=ib)    for patient in patients:        patients_response.append({            "cito": None, "no": patient.series_number, "age": patient.patient.age,            "room": patient.booking.room.room_number, "diagnosis": patient.diagnosis.name,            "start_date": patient.booking.start_date, "end_date": patient.booking.end_date,            "doctor": patient.doctor.full_name, "name": patient.patient.full_name        })    return Response(patients_response)@swagger_auto_schema(tags=['sanatorium-events'], method="get", )@api_view(['GET', ])@permission_classes((IsAuthenticated,))def get_patients_events(request):    context = {"date": "08.06.2023 14:14:33", "cito": None,               "event": ["Lorem Ipsum is simply dummy text of the printing and typesetting industry.", ],               "patient": "Alisher Qodirov", "room": "208.1", "start_date": "06.06.2023 12:31:06",               "end_date": "06.06.2023 0:00:00", "illness_id": 55               }    response = []    for i in range(5):        response.append(context)    return Response(response)