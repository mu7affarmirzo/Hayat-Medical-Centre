from datetime import datetimeimport pytzfrom django.shortcuts import get_object_or_404from drf_yasg.utils import swagger_auto_schemafrom rest_framework.decorators import permission_classes, api_viewfrom rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom api.v1.logus.serializers import ServiceModelSerializerfrom api.v1.sanatorium.serializers import ScheduleModelSerializerfrom api.v1.sanatorium.serializers.schedule import CreateScheduleSerializer, GetScheduleSerializer, \    UpdateStatusScheduleSerializerfrom apps.account.models import Accountfrom apps.logus.models import ServiceModelfrom apps.sanatorium.models import ScheduleModel@swagger_auto_schema(tags=['sanatorium-schedule'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def get_patient_schedule_view(request, pk):    """    id - from patient    """    today = datetime.utcnow().replace(tzinfo=pytz.utc).date().today()    schedule = ScheduleModel.objects.filter(start_time__gte=today, patient_id=pk)    serializer = ScheduleModelSerializer(schedule, many=True)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium-schedule'], method="post", request_body=GetScheduleSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def get_doc_schedule_view(request):    """    id - from requested user    """    user = request.user    data = request.data    serializer = GetScheduleSerializer(data=data)    if serializer.is_valid():        # uzt = timezone('Asia/Tashkent')        # now = uzt.localize(datetime.utcnow().today())        start = data.get("start", datetime.utcnow().today())        schedule = user.doctor_procedures.filter(start_time=start)        serializer = ScheduleModelSerializer(schedule, many=True)        return Response(serializer.data)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium-schedule'], method="post", request_body=GetScheduleSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def get_doc_schedule_with_id_view(request, pk):    """    id - from account    """    user = get_object_or_404(Account, pk=pk)    data = request.data    serializer = GetScheduleSerializer(data=data)    if serializer.is_valid():        # uzt = timezone('Asia/Tashkent')        # now = uzt.localize(datetime.utcnow().today())        start = data.get("start", datetime.utcnow().today())        schedule = user.doctor_procedures.filter(start_time=start)        serializer = ScheduleModelSerializer(schedule, many=True)        return Response(serializer.data)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium-schedule'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def get_service_schedule_view(request, pk):    """    id - from service    """    today = datetime.utcnow().replace(tzinfo=pytz.utc).date().today()    schedule = ScheduleModel.objects.filter(start_time__gte=today, service__id=pk)    serializer = ScheduleModelSerializer(schedule, many=True)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium-schedule'], method="post", request_body=CreateScheduleSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def post_schedule_view(request):    user = request.user    schedule = ScheduleModel(created_by=user, modified_by=user, )    serializer = CreateScheduleSerializer(schedule, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data)    else:        return Response(serializer.errors)@swagger_auto_schema(tags=['sanatorium-schedule'], method="delete")@api_view(['DELETE', ])@permission_classes((IsAuthenticated,))def delete_schedule_view(request, pk):    schedule = get_object_or_404(ScheduleModel, pk=pk)    schedule.delete()    return Response(status=204)@swagger_auto_schema(tags=['sanatorium-schedule'], method="PUT", request_body=CreateScheduleSerializer)@api_view(['PUT', ])@permission_classes((IsAuthenticated,))def update_schedule_view(request, pk):    user = request.user    schedule = get_object_or_404(ScheduleModel, pk=pk)    schedule.modified_by = user    schedule.modified_at = datetime.utcnow()    serializer = CreateScheduleSerializer(schedule, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data)    return Response(serializer.errors)@swagger_auto_schema(tags=['sanatorium-schedule'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def get_procedure_services_view(request):    services = ServiceModel.objects.filter(type="procedure")    serializer = ServiceModelSerializer(services, many=True)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium-schedule'], method="POST", request_body=UpdateStatusScheduleSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def update_status_schedule_view(request, pk):    user = request.user    serializer = UpdateStatusScheduleSerializer(data=request.data)    if serializer.is_valid():        data = request.data        schedule = get_object_or_404(ScheduleModel, pk=pk)        if user == schedule.procedure_doctor:            schedule.status = data["status"]            schedule.save(update_fields=["status"])            serializer = ScheduleModelSerializer(schedule)            return Response(serializer.data)        return Response(status=403)    return Response(serializer.errors)