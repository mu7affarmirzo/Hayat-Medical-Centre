from datetime import datetimeimport pytzfrom django.shortcuts import get_object_or_404from drf_yasg.utils import swagger_auto_schemafrom rest_framework.decorators import permission_classes, api_viewfrom rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom api.v1.sanatorium.serializers import ScheduleModelSerializerfrom api.v1.sanatorium.serializers.schedule import CreateScheduleSerializerfrom apps.sanatorium.models import ScheduleModel@swagger_auto_schema(tags=['sanatorium'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def get_schedule_view(request, pk=None):    user = request.user    today = datetime.utcnow().replace(tzinfo=pytz.utc).date().today()    if not pk and user.doctor_model:        doctor_services = user.services.all()        schedule = ScheduleModel.objects.filter(start_time__gte=today, service__in=doctor_services)    else:        schedule = ScheduleModel.objects.filter(start_time__gte=today, patient_id=pk)    serializer = ScheduleModelSerializer(schedule, many=True)    return Response(serializer.data)@swagger_auto_schema(tags=['sanatorium'], method="post", request_body=CreateScheduleSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def post_schedule_view(request):    user = request.user    schedule = ScheduleModel(created_by=user, modified_by=user, )    serializer = CreateScheduleSerializer(schedule, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data)    else:        return Response(serializer.errors)@swagger_auto_schema(tags=['sanatorium'], method="delete")@api_view(['DELETE', ])@permission_classes((IsAuthenticated,))def delete_schedule_view(request, pk):    schedule = get_object_or_404(ScheduleModel, pk=pk)    schedule.delete()    return Response(status=204)@swagger_auto_schema(tags=['sanatorium'], method="PUT", request_body=CreateScheduleSerializer)@api_view(['PUT', ])@permission_classes((IsAuthenticated,))def update_schedule_view(request, pk):    user = request.user    schedule = get_object_or_404(ScheduleModel, pk=pk)    schedule.modified_by = user    schedule.modified_at = datetime.utcnow()    serializer = CreateScheduleSerializer(schedule, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data)    return Response(serializer.errors)