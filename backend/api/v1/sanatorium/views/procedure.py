from drf_yasg.utils import swagger_auto_schemafrom rest_framework.decorators import permission_classes, api_viewfrom rest_framework.generics import get_object_or_404from rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom api.v1.sanatorium.serializers import ProcedureSerializerfrom apps.sanatorium.models import ProcedureModel@swagger_auto_schema(tags=['sanatorium'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def get_procedures_view(request):    procedures = ProcedureModel.objects.all()    serializers = ProcedureSerializer(procedures, many=True)    return Response(serializers.data)@swagger_auto_schema(tags=['sanatorium'], method="get")@api_view(['GET', ])@permission_classes((IsAuthenticated,))def get_procedure_pk_view(request, pk):    procedure = get_object_or_404(ProcedureModel, pk=pk)    serializers = ProcedureSerializer(procedure)    return Response(serializers.data)@swagger_auto_schema(tags=['sanatorium'], method="delete")@api_view(['DELETE', ])@permission_classes((IsAuthenticated,))def delete_procedure_pk_view(request, pk):    procedure = get_object_or_404(ProcedureModel, pk=pk)    procedure.delete()    return Response(status=204)@swagger_auto_schema(tags=['sanatorium'], method="post", request_body=ProcedureSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def create_procedure_view(request):    if ProcedureSerializer(data=request.data).is_valid():        procedure = ProcedureModel(crated_by=request.user, modified_by=request.user)        serializer = ProcedureSerializer(procedure, data=request.data)        serializer.save()        return Response(status=204)    return Response(status=400)@swagger_auto_schema(tags=['sanatorium'], method="post", request_body=ProcedureSerializer)@api_view(['POST', ])@permission_classes((IsAuthenticated,))def update_procedure_pk_view(request, pk):    if ProcedureSerializer(data=request.data).is_valid():        procedure = get_object_or_404(ProcedureModel, pk=pk)        serializer = ProcedureSerializer(procedure, data=request.data)        serializer.save()        return Response(status=204)    return Response(status=400)