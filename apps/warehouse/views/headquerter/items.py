from itertools import chainfrom operator import attrgetterfrom django.db.models import Qfrom django.core.paginator import EmptyPage, PageNotAnIntegerfrom django.contrib.auth.decorators import login_requiredfrom django.core.paginator import Paginatorfrom django.http import JsonResponsefrom django.shortcuts import render, redirectfrom apps.warehouse.forms import ItemSearchFormfrom apps.warehouse.models import ItemsModel, ItemsInStockModel, StorePointStaffModelITEMS_PER_PAGE = 30@login_requireddef get_items(request):    staff = request.user    context = {}    items = ItemsModel.objects.all()    paginator = Paginator(items, 1)    page_number = request.GET.get("page", 1)    page_obj = paginator.get_page(page_number)    context["items"] = page_obj    return render(request, 'items/items.html', context)@login_requireddef item_search(request):    if 'q' in request.GET:        query = request.GET.get('q')        items = ItemsModel.objects.filter(name__icontains=query)        items_with_series = ItemsModel.objects.filter(seria__icontains=query)        items = list(chain(items, items_with_series))        results = [{            'id': item.id, 'name': item.name,            'seria': item.seria, 'company': item.company.name,            'in_pack': item.in_pack, 'unit': item.unit        } for item in items]        print(results)        return JsonResponse(results, safe=False)    return JsonResponse({'error': 'No query provided'}, status=400)@login_requireddef items_in_stock_search(request):    user = request.user    store_point = StorePointStaffModel.objects.filter(staff=user)    store_point = store_point.first()    warehouse = store_point.store_point    if 'q' in request.GET:        query = request.GET.get('q')        items = ItemsInStockModel.objects.filter(item__name__icontains=query, warehouse=warehouse)        items_with_series = ItemsInStockModel.objects.filter(item__seria__icontains=query, warehouse=warehouse)        items = list(chain(items, items_with_series))        results = [            {                'id': item.id, 'name': item.item.name, 'price': item.unit_price,                'seria': item.item.seria, 'company': item.item.company.name,                'quantity': item.quantity, 'in_pack': item.item.in_pack, 'unit': item.item.unit,                'expire_date': item.expire_date, 'days_until_expire': item.days_until_expire            } for item in items]        return JsonResponse(results, safe=False)    return JsonResponse({'error': 'No query provided'}, status=400)@login_requireddef items_list_view(request):    user = request.user    store_point = StorePointStaffModel.objects.filter(staff=user)    store_point = store_point.first()    warehouse = store_point.store_point    query = request.GET.get('q', '')    search_query = request.GET.get('table_search')    if search_query:        items = sorted(get_items_queryset(search_query, warehouse), key=attrgetter('item.name'), reverse=True)    else:        items = sorted(get_items_queryset(query, warehouse), key=attrgetter('item.name'), reverse=True)    page = request.GET.get('page', 1)    items_paginator = Paginator(items, ITEMS_PER_PAGE)    try:        items = items_paginator.page(page)    except PageNotAnInteger:        items = items_paginator.page(ITEMS_PER_PAGE)    except EmptyPage:        items = items_paginator.page(items_paginator.num_pages)    context = {        "items": items    }    return render(request, 'items/items_list.html', context=context)def get_items_queryset(query=None, warehouse=None):    queryset = []    queries = query.split(" ")    for q in queries:        items = ItemsInStockModel.objects.filter(warehouse=warehouse).filter(                Q(item__name__icontains=q) |                Q(income_seria__icontains=q) |                Q(item__seria__icontains=q)            ).distinct()        for new in items:            queryset.append(new)    return list(set(queryset))